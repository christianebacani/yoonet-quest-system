File Structure:

assets/
	css/
		style.css
	
	images/
		yoonet-logo.jpg

	js/
		script.js

includes/
	auth.php
	config.php
	functions.php
	login.php
	logout.php

uploads/

accept_quest.php
create_quest.php
dashboard.php
edit_quest.php
index.php
landing.php
leaderboard.php
login.php
logout.php
register.php
settings.php
update_quest.php

assets/css/style.css:
:root {
    --primary-color: #6C63FF;
    --secondary-color: #4D44DB;
    --dark-color: #2A2A72;
    --light-color: #F8F9FA;
    --success-color: #28A745;
    --error-color: #DC3545;
    --warning-color: #FFC107;
    --gray-color: #6C757D;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

body {
    background-color: #f5f5f7;
    color: #333;
    line-height: 1.6;
}

.login-container {
    max-width: 420px;
    margin: 50px auto;
    padding: 30px;
    background: white;
    border-radius: 12px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
}

.login-header {
    text-align: center;
    margin-bottom: 30px;
}

.login-header .logo {
    width: 120px;
    margin-bottom: 20px;
}

.login-header h1 {
    color: var(--dark-color);
    margin-bottom: 10px;
    font-size: 24px;
}

.login-header p {
    color: var(--gray-color);
    font-size: 14px;
}

.login-form {
    margin-bottom: 20px;
}

.form-group {
    margin-bottom: 20px;
}

.form-group label {
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    color: var(--dark-color);
    font-size: 14px;
}

.form-group input {
    width: 100%;
    padding: 12px 15px;
    border: 1px solid #ddd;
    border-radius: 8px;
    font-size: 14px;
    transition: border 0.3s;
}

.form-group input:focus {
    border-color: var(--primary-color);
    outline: none;
}

.btn-login {
    width: 100%;
    padding: 12px;
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 16px;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.3s;
}

.btn-login:hover {
    background-color: var(--secondary-color);
}

.login-footer {
    text-align: center;
    font-size: 14px;
    color: var(--gray-color);
}

.login-footer a {
    color: var(--primary-color);
    text-decoration: none;
    font-weight: 500;
}

.login-footer a:hover {
    text-decoration: underline;
}

.alert {
    padding: 12px;
    border-radius: 8px;
    margin-bottom: 20px;
    font-size: 14px;
}

.alert-error {
    background-color: rgba(220, 53, 69, 0.1);
    color: var(--error-color);
    border: 1px solid rgba(220, 53, 69, 0.3);
}

.alert-success {
    background-color: rgba(40, 167, 69, 0.1);
    color: var(--success-color);
    border: 1px solid rgba(40, 167, 69, 0.3);
}

/* Dashboard Styles */
.dashboard-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

.dashboard-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px 0;
    border-bottom: 1px solid #eee;
    margin-bottom: 30px;
}

.header-left {
    display: flex;
    align-items: center;
    gap: 15px;
}

.header-left .logo {
    width: 40px;
}

.header-right {
    display: flex;
    align-items: center;
    gap: 20px;
}

.welcome-message {
    font-weight: 500;
    color: var(--dark-color);
}

.btn-logout {
    padding: 8px 16px;
    background-color: var(--error-color);
    color: white;
    border: none;
    border-radius: 6px;
    font-size: 14px;
    cursor: pointer;
    transition: background-color 0.3s;
}

.btn-logout:hover {
    background-color: #c82333;
}

.role-badge {
    margin-bottom: 30px;
    text-align: center;
}

.badge {
    padding: 6px 12px;
    border-radius: 20px;
    font-size: 14px;
    font-weight: 500;
    color: white;
}

.badge-taker {
    background-color: var(--primary-color);
}

.badge-giver {
    background-color: var(--success-color);
}

.badge-admin {
    background-color: var(--warning-color);
}

.dashboard-content {
    background: white;
    padding: 30px;
    border-radius: 12px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
}

.dashboard-content h2 {
    color: var(--dark-color);
    margin-bottom: 20px;
}

.giver-actions {
    margin-top: 30px;
    padding-top: 20px;
    border-top: 1px solid #eee;
}

.giver-actions h3 {
    margin-bottom: 15px;
    color: var(--dark-color);
}

.btn-action {
    padding: 10px 20px;
    background-color: var(--primary-color);
    color: white;
    border: none;
    border-radius: 6px;
    margin-right: 10px;
    cursor: pointer;
    transition: background-color 0.3s;
}

.btn-action:hover {
    background-color: var(--secondary-color);
}

.employee-id {
    font-size: 14px;
    color: var(--gray-color);
    margin-right: 15px;
}

.user-info {
    background-color: #f8f9fa;
    padding: 15px;
    border-radius: 8px;
    margin-bottom: 20px;
}

.user-info p {
    margin-bottom: 8px;
}

/* Error debugging styles */
.debug-info {
    background-color: #fff3cd;
    padding: 15px;
    margin: 20px 0;
    border-radius: 5px;
    border-left: 4px solid #ffc107;
}

.debug-info pre {
    white-space: pre-wrap;
    word-wrap: break-word;
    font-family: monospace;
}

.alert.alert-error {
    background-color: #ffebee;
    border-left: 4px solid #f44336;
    padding: 15px;
    margin-bottom: 20px;
    border-radius: 4px;
}

.alert.alert-success {
    background-color: #e8f5e9;
    border-left: 4px solid #4caf50;
    padding: 15px;
    margin-bottom: 20px;
    border-radius: 4px;
}

.error-help {
    margin-top: 10px;
    font-size: 14px;
}

.error-help a {
    color: #2196f3;
    text-decoration: none;
}

.error-help a:hover {
    text-decoration: underline;
}

assets/js/script.js:
// You can add any client-side functionality here
document.addEventListener('DOMContentLoaded', function() {
    // Add any interactive elements here
    
    // Example: Form validation
    const forms = document.querySelectorAll('form');
    forms.forEach(form => {
        form.addEventListener('submit', function(e) {
            // Add any client-side validation here
            const password = form.querySelector('#password');
            const confirmPassword = form.querySelector('#confirm_password');
            
            if (password && confirmPassword && password.value !== confirmPassword.value) {
                e.preventDefault();
                alert('Passwords do not match!');
            }
        });
    });
});

function confirmDeleteQuest() {
    return confirm('Are you sure you want to delete this quest? This action cannot be undone.');
}

includes/auth.php:
<?php
require_once 'config.php';
require_once 'functions.php';

// Handle registration only
if (isset($_POST['register'])) {
    try {
        $employee_id = sanitize_input($_POST['employee_id']);
        $password = sanitize_input($_POST['password']);
        $confirm_password = sanitize_input($_POST['confirm_password']);
        $full_name = sanitize_input($_POST['full_name']);
        $email = sanitize_input($_POST['email']);
        $role = sanitize_input($_POST['role'] ?? 'quest_taker'); // THIS WAS MISSING
        
        // Validate inputs
        if (empty($employee_id) || empty($password) || empty($full_name) || empty($email)) {
            throw new Exception("All fields are required");
        }

        if ($password !== $confirm_password) {
            throw new Exception("Passwords do not match");
        }

        if (strlen($password) < 8) {
            throw new Exception("Password must be at least 8 characters");
        }

        // Check if employee ID exists
        $stmt = $pdo->prepare("SELECT id FROM users WHERE employee_id = ?");
        $stmt->execute([$employee_id]);
        
        if ($stmt->rowCount() > 0) {
            throw new Exception("Employee ID already registered");
        }

        // Hash password and register user
        $hashed_password = password_hash($password, PASSWORD_DEFAULT);
        $stmt = $pdo->prepare("INSERT INTO users (employee_id, password, full_name, email, role) VALUES (?, ?, ?, ?, ?)");
        
        // Changed from hardcoded 'quest_taker' to $role variable
        if ($stmt->execute([$employee_id, $hashed_password, $full_name, $email, $role])) {
            $_SESSION['reg_success'] = "Registration successful! Please login with your credentials.";
            header('Location: ../login.php');
            exit();
        } else {
            throw new Exception("Registration failed. Please try again.");
        }
    } catch (Exception $e) {
        $_SESSION['reg_error'] = $e->getMessage();
        $_SESSION['form_data'] = $_POST;
        header('Location: ../register.php');
        exit();
    }
}
?>

includes/config.php:
<?php
session_start();

$host = 'localhost';
$db   = 'yoonet_quest';
$user = 'root';
$pass = '';
$charset = 'utf8mb4';

$dsn = "mysql:host=$host;dbname=$db;charset=$charset";
$options = [
    PDO::ATTR_ERRMODE            => PDO::ERRMODE_EXCEPTION,
    PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
    PDO::ATTR_EMULATE_PREPARES   => false,
];

try {
    $pdo = new PDO($dsn, $user, $pass, $options);
} catch (\PDOException $e) {
    die("Database connection failed: " . $e->getMessage());
}
?>

includes/functions.php:
<?php
function is_logged_in() {
    return isset($_SESSION['user_id']);
}

function redirect($url) {
    header("Location: $url");
    exit();
}

function sanitize_input($data) {
    return htmlspecialchars(strip_tags(trim($data)));
}

function validate_password($password) {
    if (strlen($password) < 8) {
        throw new Exception("Password must be at least 8 characters");
    }
}

function is_manager($employee_id) {
    global $pdo;
    
    try {
        // Get the user's role from the users table
        $stmt = $pdo->prepare("SELECT role FROM users WHERE employee_id = ?");
        $stmt->execute([$employee_id]);
        $role = $stmt->fetchColumn();
        
        // Consider these roles as managers (adjust according to your needs)
        return in_array($role, ['admin', 'quest_giver', 'manager']);
    } catch (PDOException $e) {
        error_log("Database error in is_manager(): " . $e->getMessage());
        return false;
    }
}
?>

includes/login.php:
<?php
require_once 'config.php';
require_once 'functions.php';

if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['login'])) {
    try {
        // Validate inputs
        $employee_id = sanitize_input($_POST['employee_id'] ?? '');
        $password = sanitize_input($_POST['password'] ?? '');
        
        if (empty($employee_id) || empty($password)) {
            throw new Exception("Both Employee ID and password are required");
        }

        // Check credentials
        $stmt = $pdo->prepare("SELECT * FROM users WHERE employee_id = ?");
        $stmt->execute([$employee_id]);
        $user = $stmt->fetch();
        
        if (!$user || !password_verify($password, $user['password'])) {
            throw new Exception("Invalid credentials. Please try again.");
        }

        // Set session variables
        $_SESSION['user_id'] = $user['id'];
        $_SESSION['employee_id'] = $user['employee_id'];
        $_SESSION['full_name'] = $user['full_name'];
        $_SESSION['email'] = $user['email'];
        $_SESSION['role'] = $user['role'];
        
        // Redirect to landing page (changed from dashboard.php)
        header('Location: ../landing.php');
        exit();
        
    } catch (Exception $e) {
        // Store error and redirect back to login page
        $_SESSION['login_error'] = $e->getMessage();
        header('Location: ../login.php');
        exit();
    }
}

// If someone tries to access this file directly
header('Location: ../login.php');
exit();
?>

indludes/logout.php:
<?php
// includes/logout.php
session_start();

// Unset all session variables
$_SESSION = array();

// Destroy the session
session_destroy();

// Redirect to login page
header("Location: ../login.php");
exit();
?>
a

accept_quest.php:
<?php
require_once 'includes/config.php';
require_once 'includes/functions.php';

if (!is_logged_in()) {
    header('Content-Type: application/json');
    echo json_encode(['success' => false, 'error' => 'Not logged in']);
    exit();
}

// Check if user has quest taker permissions
$role = $_SESSION['role'] ?? '';
if (!in_array($role, ['quest_taker', 'hybrid'])) {
    header('Content-Type: application/json');
    echo json_encode(['success' => false, 'error' => 'Unauthorized']);
    exit();
}

header('Content-Type: application/json');

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $quest_id = $_POST['quest_id'] ?? 0;
    $employee_id = $_SESSION['employee_id'] ?? 0;

    try {
        // Check if quest exists and is active
        $stmt = $pdo->prepare("SELECT id FROM quests WHERE id = ? AND status = 'active'");
        $stmt->execute([$quest_id]);
        $quest = $stmt->fetch();
        
        if (!$quest) {
            echo json_encode(['success' => false, 'error' => 'Quest not available']);
            exit();
        }

        // Check if user already has this quest (in any status)
        $stmt = $pdo->prepare("SELECT id FROM user_quests WHERE employee_id = ? AND quest_id = ?");
        $stmt->execute([$employee_id, $quest_id]);
        $existing = $stmt->fetch();
        
        if ($existing) {
            echo json_encode(['success' => false, 'error' => 'You already have this quest']);
            exit();
        }

        // Accept the quest
        $stmt = $pdo->prepare("INSERT INTO user_quests (employee_id, quest_id, status, assigned_at) 
                             VALUES (?, ?, 'in_progress', NOW())");
        $stmt->execute([$employee_id, $quest_id]);
        
        echo json_encode(['success' => true]);
    } catch (PDOException $e) {
        error_log("Database error accepting quest: " . $e->getMessage());
        echo json_encode(['success' => false, 'error' => 'Database error']);
    }
} else {
    echo json_encode(['success' => false, 'error' => 'Invalid request method']);
}

create_quest.php:
<?php

require_once 'includes/config.php';
require_once 'includes/functions.php';

if (!is_logged_in()) {
    header('Location: login.php');
    exit();
}

// Check if user has quest giver permissions
$role = $_SESSION['role'] ?? '';
if (!in_array($role, ['quest_giver', 'hybrid'])) {
    header('Location: dashboard.php');
    exit();
}

// Handle AJAX request for group members
if (isset($_GET['ajax']) && $_GET['ajax'] == 'get_group_members' && isset($_GET['group_id'])) {
    header('Content-Type: application/json');
    
    try {
        $group_id = intval($_GET['group_id']);
        $current_user_id = $_SESSION['employee_id'];
        $members = [];
        
        $stmt = $pdo->prepare("SELECT u.employee_id, u.full_name 
                              FROM group_members gm
                              JOIN users u ON gm.employee_id = u.employee_id
                              WHERE gm.group_id = ? 
                              AND u.role IN ('quest_taker', 'hybrid')
                              AND u.employee_id != ?
                              ORDER BY u.full_name");
        $stmt->execute([$group_id, $current_user_id]);
        $members = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
        echo json_encode(['success' => true, 'members' => $members]);
    } catch (PDOException $e) {
        error_log("Database error: " . $e->getMessage());
        echo json_encode(['success' => false, 'message' => 'Database error']);
    }
    exit;
}

// Create and populate quest_categories table if needed
try {
    $pdo->exec("CREATE TABLE IF NOT EXISTS quest_categories (
        id INT AUTO_INCREMENT PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        description TEXT,
        icon VARCHAR(50),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )");

    // Check if table is empty
    $stmt = $pdo->query("SELECT COUNT(*) FROM quest_categories");
    $count = $stmt->fetchColumn();
    
    if ($count == 0) {
        // Insert default categories
        $defaultCategories = [
            ['name' => 'Training', 'description' => 'Employee training and development', 'icon' => 'fa-graduation-cap'],
            ['name' => 'Project', 'description' => 'Work-related projects', 'icon' => 'fa-project-diagram'],
            ['name' => 'Team Building', 'description' => 'Team activities and bonding', 'icon' => 'fa-users'],
            ['name' => 'Innovation', 'description' => 'Creative and innovative tasks', 'icon' => 'fa-lightbulb'],
            ['name' => 'Administrative', 'description' => 'Office and administrative work', 'icon' => 'fa-file-alt']
        ];
        
        $stmt = $pdo->prepare("INSERT INTO quest_categories (name, description, icon) VALUES (:name, :description, :icon)");
        
        foreach ($defaultCategories as $category) {
            $stmt->execute([
                ':name' => $category['name'],
                ':description' => $category['description'],
                ':icon' => $category['icon']
            ]);
        }
    }
} catch (PDOException $e) {
    error_log("Error setting up categories: " . $e->getMessage());
}

// Create new tables for our enhancements
try {
    // Add quest_type and visibility to quests table
    $pdo->exec("ALTER TABLE quests 
                ADD COLUMN IF NOT EXISTS quest_type ENUM('single', 'recurring') DEFAULT 'single'");
    $pdo->exec("ALTER TABLE quests 
                ADD COLUMN IF NOT EXISTS visibility ENUM('public', 'private') DEFAULT 'public'");
    $pdo->exec("ALTER TABLE quests 
                ADD COLUMN IF NOT EXISTS recurrence_pattern VARCHAR(50) DEFAULT NULL");
    $pdo->exec("ALTER TABLE quests 
                ADD COLUMN IF NOT EXISTS recurrence_end_date DATETIME DEFAULT NULL");
    $pdo->exec("ALTER TABLE quests 
                ADD COLUMN IF NOT EXISTS publish_at DATETIME DEFAULT NULL");

    // Create subtasks table
    $pdo->exec("CREATE TABLE IF NOT EXISTS quest_subtasks (
        id INT AUTO_INCREMENT PRIMARY KEY,
        quest_id INT NOT NULL,
        description TEXT NOT NULL,
        is_completed BOOLEAN DEFAULT false,
        FOREIGN KEY (quest_id) REFERENCES quests(id) ON DELETE CASCADE
    )");

    // Create attachments table
    $pdo->exec("CREATE TABLE IF NOT EXISTS quest_attachments (
        id INT AUTO_INCREMENT PRIMARY KEY,
        quest_id INT NOT NULL,
        file_name VARCHAR(255) NOT NULL,
        file_path VARCHAR(255) NOT NULL,
        file_size INT NOT NULL,
        file_type VARCHAR(100) NOT NULL,
        uploaded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (quest_id) REFERENCES quests(id) ON DELETE CASCADE
    )");
} catch (PDOException $e) {
    error_log("Error setting up new tables: " . $e->getMessage());
}

$error = '';
$success = '';

// Initialize form variables
$title = '';
$description = '';
$xp = 10;
$category_id = null;
$due_date = null;
$assign_to = [];
$assign_group = null;
$quest_type = 'single';
$visibility = 'public';
$subtasks = [];
$recurrence_pattern = '';
$recurrence_end_date = '';
$publish_at = '';

// Fetch employees, categories, and groups for assignment
$employees = [];
$categories = [];
$groups = [];
try {
    // Get all quest takers and hybrid users EXCEPT the current user
    $current_user_id = $_SESSION['employee_id'];
    $stmt = $pdo->prepare("SELECT employee_id, full_name FROM users 
                          WHERE role IN ('quest_taker', 'hybrid') 
                          AND employee_id != ?
                          ORDER BY full_name");
    $stmt->execute([$current_user_id]);
    $employees = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    // Get all quest categories with icons
    $stmt = $pdo->query("SELECT id, name, icon FROM quest_categories ORDER BY name");
    $categories = $stmt->fetchAll(PDO::FETCH_ASSOC);
    
    // Get all employee groups
    $stmt = $pdo->query("SELECT id, group_name FROM employee_groups ORDER BY group_name");
    $groups = $stmt->fetchAll(PDO::FETCH_ASSOC);
} catch (PDOException $e) {
    error_log("Database error fetching data: " . $e->getMessage());
}

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $title = trim($_POST['title'] ?? '');
    $description = trim($_POST['description'] ?? '');
    $xp = intval($_POST['xp'] ?? 0);
    $category_id = isset($_POST['category_id']) ? intval($_POST['category_id']) : null;
    $due_date = !empty($_POST['due_date']) ? $_POST['due_date'] : null;
    $assign_to = isset($_POST['assign_to']) ? $_POST['assign_to'] : [];
    $assign_group = isset($_POST['assign_group']) ? $_POST['assign_group'] : null;
    $status = 'active';
    
    // New fields
    $quest_type = $_POST['quest_type'] ?? 'single';
    $visibility = $_POST['visibility'] ?? 'public';
    $subtasks = isset($_POST['subtasks']) ? array_filter($_POST['subtasks']) : [];
    $recurrence_pattern = $_POST['recurrence_pattern'] ?? '';
    $recurrence_end_date = $_POST['recurrence_end_date'] ?? '';
    $publish_at = $_POST['publish_at'] ?? '';

    // Validate input
    if (empty($title)) {
        $error = 'Title is required';
    } elseif (strlen($title) > 255) {
        $error = 'Title must be less than 255 characters';
    } elseif (empty($description)) {
        $error = 'Description is required';
    } elseif (strlen($description) > 2000) {
        $error = 'Description must be less than 2000 characters';
    } elseif ($xp < 1 || $xp > 100) {
        $error = 'XP must be between 1 and 100';
    } elseif (empty($category_id)) {
        $error = 'Category is required';
    } elseif (!empty($due_date) && !strtotime($due_date)) {
        $error = 'Invalid due date format';
    } elseif ($quest_type == 'recurring' && empty($recurrence_pattern)) {
        $error = 'Recurrence pattern is required for recurring quests';
    } elseif ($quest_type == 'recurring' && !empty($recurrence_end_date) && !strtotime($recurrence_end_date)) {
        $error = 'Invalid recurrence end date format';
    } elseif (!empty($publish_at) && !strtotime($publish_at)) {
        $error = 'Invalid publish date/time format';
    } elseif (empty($assign_to) && empty($assign_group)) {
        $error = 'You must assign the quest to at least one employee or group';
    } else {
        // Validate category exists
        try {
            $stmt = $pdo->prepare("SELECT id FROM quest_categories WHERE id = ?");
            $stmt->execute([$category_id]);
            if (!$stmt->fetch()) {
                $error = 'Selected category does not exist';
            }
        } catch (PDOException $e) {
            $error = 'Error validating category: ' . $e->getMessage();
        }
        
        // Validate assigned employees exist and are quest takers
        if (empty($error) && !empty($assign_to)) {
            try {
                $placeholders = implode(',', array_fill(0, count($assign_to), '?'));
                $stmt = $pdo->prepare("SELECT COUNT(*) FROM users 
                                      WHERE employee_id IN ($placeholders) 
                                      AND role IN ('quest_taker', 'hybrid')");
                $stmt->execute($assign_to);
                $count = $stmt->fetchColumn();
                
                if ($count != count($assign_to)) {
                    $error = 'One or more assigned employees are invalid or not quest takers';
                }
            } catch (PDOException $e) {
                $error = 'Error validating assigned employees: ' . $e->getMessage();
            }
        }
        
        // Validate group exists if selected
        if (empty($error) && !empty($assign_group)) {
            try {
                $stmt = $pdo->prepare("SELECT id FROM employee_groups WHERE id = ?");
                $stmt->execute([$assign_group]);
                if (!$stmt->fetch()) {
                    $error = 'Selected group does not exist';
                }
            } catch (PDOException $e) {
                $error = 'Error validating group: ' . $e->getMessage();
            }
        }
        
        // Validate file uploads
        if (empty($error) && !empty($_FILES['attachments']['name'][0])) {
            $allowedTypes = ['application/pdf', 'image/jpeg', 'image/png'];
            $maxSize = 5 * 1024 * 1024; // 5MB
            $maxTotalSize = 20 * 1024 * 1024; // 20MB total
            $totalSize = 0;
            
            foreach ($_FILES['attachments']['tmp_name'] as $key => $tmp_name) {
                if ($_FILES['attachments']['error'][$key] === UPLOAD_ERR_OK) {
                    $fileType = $_FILES['attachments']['type'][$key];
                    $fileSize = $_FILES['attachments']['size'][$key];
                    $totalSize += $fileSize;
                    
                    if (!in_array($fileType, $allowedTypes)) {
                        $error = 'Only PDF, JPG, and PNG files are allowed';
                        break;
                    }
                    
                    if ($fileSize > $maxSize) {
                        $error = 'Each file must be less than 5MB';
                        break;
                    }
                } else {
                    $error = 'Error uploading one or more files';
                    break;
                }
            }
            
            if (empty($error) && $totalSize > $maxTotalSize) {
                $error = 'Total attachments size must be less than 20MB';
            }
        }
        
        // Validate subtasks
        if (empty($error) && !empty($subtasks)) {
            foreach ($subtasks as $subtask) {
                if (strlen(trim($subtask)) > 500) {
                    $error = 'Each subtask must be less than 500 characters';
                    break;
                }
            }
        }
        
        // If no validation errors, proceed with database operations
        if (empty($error)) {
            try {
                $pdo->beginTransaction();
                
                // Create the quest
                $stmt = $pdo->prepare("INSERT INTO quests 
                    (title, description, xp, status, due_date, created_by, category_id, created_at,
                     quest_type, visibility, recurrence_pattern, recurrence_end_date, publish_at) 
                    VALUES (?, ?, ?, ?, ?, ?, ?, NOW(), ?, ?, ?, ?, ?)");
                $stmt->execute([
                    $title, 
                    $description, 
                    $xp, 
                    $status, 
                    $due_date,
                    $_SESSION['employee_id'],
                    $category_id,
                    $quest_type,
                    $visibility,
                    $recurrence_pattern,
                    !empty($recurrence_end_date) ? $recurrence_end_date : null,
                    !empty($publish_at) ? $publish_at : null
                ]);
                $quest_id = $pdo->lastInsertId();
                
                // Add subtasks if any
                if (!empty($subtasks)) {
                    $stmt = $pdo->prepare("INSERT INTO quest_subtasks 
                        (quest_id, description) VALUES (?, ?)");
                    foreach ($subtasks as $subtask) {
                        if (!empty(trim($subtask))) {
                            $stmt->execute([$quest_id, trim($subtask)]);
                        }
                    }
                }
                
                // Handle file uploads
                if (!empty($_FILES['attachments']['name'][0])) {
                    $uploadDir = 'uploads/quests/' . $quest_id . '/';
                    if (!file_exists($uploadDir)) {
                        mkdir($uploadDir, 0755, true);
                    }
                    
                    $allowedTypes = ['application/pdf', 'image/jpeg', 'image/png'];
                    $maxSize = 5 * 1024 * 1024; // 5MB
                    
                    foreach ($_FILES['attachments']['tmp_name'] as $key => $tmp_name) {
                        if ($_FILES['attachments']['error'][$key] === UPLOAD_ERR_OK) {
                            $fileType = $_FILES['attachments']['type'][$key];
                            $fileSize = $_FILES['attachments']['size'][$key];
                            $originalName = basename($_FILES['attachments']['name'][$key]);
                            
                            if (in_array($fileType, $allowedTypes) && $fileSize <= $maxSize) {
                                $newFilename = uniqid() . '.' . pathinfo($originalName, PATHINFO_EXTENSION);
                                $destination = $uploadDir . $newFilename;
                                
                                if (move_uploaded_file($tmp_name, $destination)) {
                                    $stmt = $pdo->prepare("INSERT INTO quest_attachments 
                                        (quest_id, file_name, file_path, file_size, file_type) 
                                        VALUES (?, ?, ?, ?, ?)");
                                    $stmt->execute([
                                        $quest_id,
                                        $originalName,
                                        $destination,
                                        $fileSize,
                                        $fileType
                                    ]);
                                }
                            }
                        }
                    }
                }
                
                // Get employees from group if group is selected
                $group_employees = [];
                if ($assign_group) {
                    $stmt = $pdo->prepare("SELECT employee_id FROM group_members WHERE group_id = ?");
                    $stmt->execute([$assign_group]);
                    $group_employees = $stmt->fetchAll(PDO::FETCH_COLUMN, 0);
                }
                
                // Combine individual assignments with group assignments
                $all_assignments = array_unique(array_merge($assign_to, $group_employees));
                
                // Assign quest to selected employees
                if (!empty($all_assignments)) {
                    foreach ($all_assignments as $employee_id) {
                        // First check if the employee exists
                        $stmt = $pdo->prepare("SELECT id FROM users WHERE id = ?");
                        $stmt->execute([$employee_id]);
                        $userExists = $stmt->fetch();
                        
                        if (!$userExists) {
                            error_log("Attempted to assign quest to non-existent user: " . $employee_id);
                            continue; // Skip this assignment
                        }

                        $stmt = $pdo->prepare("INSERT INTO user_quests 
                            (employee_id, quest_id, status, assigned_at) 
                            VALUES (?, ?, 'assigned', NOW())");
                        $stmt->execute([$employee_id, $quest_id]);
                        
                        // Record in XP history only if user exists
                        $stmt = $pdo->prepare("INSERT INTO xp_history 
                            (employee_id, xp_change, source_type, source_id, description, created_at)
                            VALUES (?, ?, 'quest_assigned', ?, ?, NOW())");
                        $stmt->execute([
                            $employee_id,
                            0, // No XP change on assignment
                            $quest_id,
                            "Quest assigned: $title"
                        ]);
                    }
                }
                
                $pdo->commit();
                
                $assignment_count = count($all_assignments);
                $success = 'Quest created successfully' . 
                           ($assignment_count > 0 ? " and assigned to $assignment_count employee(s)!" : '!');
                
                // Clear form on success
                if ($success) {
                    $title = $description = '';
                    $xp = 10;
                    $assign_to = [];
                    $assign_group = null;
                    $category_id = null;
                    $due_date = null;
                    $subtasks = [];
                    $recurrence_pattern = '';
                    $recurrence_end_date = '';
                    $publish_at = '';
                }
            } catch (PDOException $e) {
                $pdo->rollBack();
                error_log("Database error: " . $e->getMessage());
                $error = 'Error creating quest: ' . $e->getMessage();
            }
        }
    }
}

// Set default values if not set
$current_theme = $_SESSION['theme'] ?? 'default';
$dark_mode = $_SESSION['dark_mode'] ?? false;
$font_size = $_SESSION['font_size'] ?? 'medium';

// Function to get the body class based on theme
function getBodyClass() {
    global $current_theme, $dark_mode;
    
    $classes = [];
    
    if ($dark_mode) {
        $classes[] = 'dark-mode';
    }
    
    if ($current_theme !== 'default') {
        $classes[] = $current_theme . '-theme';
    }
    
    return implode(' ', $classes);
}

// Function to get font size CSS
function getFontSize() {
    global $font_size;
    
    switch ($font_size) {
        case 'small': return '14px';
        case 'large': return '18px';
        default: return '16px';
    }
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create New Quest</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f8fafc;
        }
        
        .card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.05), 0 2px 4px -1px rgba(0, 0, 0, 0.03);
            transition: all 0.3s ease;
        }
        
        .card:hover {
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.07), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }
        
        .btn-primary {
            background-color: #6366f1;
            transition: all 0.2s ease;
        }
        
        .btn-primary:hover {
            background-color: #4f46e5;
            transform: translateY(-1px);
        }
        
        .btn-secondary {
            background-color: #e0e7ff;
            color: #4f46e5;
            transition: all 0.2s ease;
        }
        
        .btn-secondary:hover {
            background-color: #c7d2fe;
        }
        
        .assignment-section {
            transition: all 0.3s ease;
            overflow: hidden;
            max-height: 0;
            opacity: 0;
        }
        
        .assignment-section.visible {
            max-height: 1000px;
            opacity: 1;
            margin-top: 1rem;
        }
        
        .select2-container--default .select2-selection--multiple {
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 0.5rem;
            min-height: 42px;
        }
        
        .select2-container--default.select2-container--focus .select2-selection--multiple {
            border-color: #818cf8;
            box-shadow: 0 0 0 2px rgba(129, 140, 248, 0.2);
        }
        
        /* Updated Select2 styles */
        .select2-container--default .select2-selection--multiple .select2-selection__choice {
            background-color: #e0e7ff;
            border: 1px solid #c7d2fe;
            border-radius: 6px;
            padding: 0.25rem 0.5rem;
            color: #4f46e5;
            display: flex;
            align-items: center;
            flex-direction: row-reverse;
        }
        
        .select2-container--default .select2-selection--multiple .select2-selection__choice__remove {
            order: 1;
            margin-left: 5px;
            border-left: none;
            border-right: 1px solid #c7d2fe;
            padding-right: 5px;
            padding-left: 0;
            color: #4f46e5;
        }
        
        .select2-container--default .select2-selection--multiple .select2-selection__choice__display {
            order: 2;
        }

        /* Updated clear button styles */
        .select2-container--default .select2-selection--multiple .select2-selection__clear {
            display: none !important; /* Hide the clear button */
        }

        /* Adjust padding to accommodate dropdown arrow */
        .select2-container--default .select2-selection--multiple {
            padding-right: 30px;
        }

        /* Make sure dropdown arrow doesn't overlap */
        .select2-container--default .select2-selection--multiple .select2-selection__arrow {
            right: 10px;
        }
        
        .assignment-tabs {
            display: flex;
            border-bottom: 1px solid #e2e8f0;
            margin-bottom: 1rem;
        }
        
        .assignment-tab {
            padding: 0.75rem 1.5rem;
            cursor: pointer;
            border-bottom: 2px solid transparent;
            font-weight: 500;
            color: #64748b;
            transition: all 0.2s ease;
        }
        
        .assignment-tab:hover {
            color: #4f46e5;
        }
        
        .assignment-tab.active {
            border-bottom-color: #6366f1;
            color: #6366f1;
        }
        
        .tab-content {
            display: none;
            animation: fadeIn 0.3s ease;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        .tab-content.active {
            display: block;
        }
        
        .category-icon {
            width: 24px;
            height: 24px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            margin-right: 8px;
            color: #6366f1;
        }
        
        .xp-input-container {
            position: relative;
            width: 120px;
        }
        
        .xp-input-container input {
            padding-right: 40px;
        }
        
        .xp-badge {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            background-color: #e0e7ff;
            color: #4f46e5;
            padding: 2px 8px;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 600;
        }
        
        .subtask-item {
            transition: all 0.2s ease;
        }
        
        .subtask-item:hover {
            transform: translateX(2px);
        }
        
        .remove-subtask {
            transition: all 0.2s ease;
        }
        
        .remove-subtask:hover {
            transform: scale(1.1);
            color: #ef4444;
        }

        .flatpickr-calendar {
            font-family: 'Inter', sans-serif;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
            border-radius: 12px;
            border: none;
            padding: 12px;
            z-index: 99999 !important;
            width: 100% !important;
        }
        
        .flatpickr-innerContainer {
            overflow: visible !important;
        }
        
        .flatpickr-day {
            color: #1e293b !important;
            border-radius: 6px;
            font-weight: 500;
            border: none;
            max-width: none !important;
            width: calc(100% / 7) !important;
            height: 36px !important;
            line-height: 36px !important;
            margin: 2px 0 !important;
            opacity: 1 !important;
            visibility: visible !important;
        }
        
        .flatpickr-day.selected, 
        .flatpickr-day.selected:hover {
            background-color: #6366f1 !important;
            color: white !important;
            border-color: #6366f1 !important;
        }
        
        .flatpickr-day.today {
            border-color: #6366f1 !important;
        }
        
        .flatpickr-day.today:hover {
            background-color: #e0e7ff !important;
        }
        
        .flatpickr-day.flatpickr-disabled,
        .flatpickr-day.prevMonthDay,
        .flatpickr-day.nextMonthDay {
            color: #94a3b8 !important;
            opacity: 0.5 !important;
            visibility: visible !important;
        }
        
        .flatpickr-day:hover {
            background: #e0e7ff !important;
        }
        
        .flatpickr-weekday {
            color: #64748b !important;
            font-weight: 500;
            width: calc(100% / 7) !important;
            flex: none !important;
        }
        
        .flatpickr-weekdays,
        .flatpickr-days {
            width: 100% !important;
        }
        
        .flatpickr-days {
            width: 100% !important;
            overflow: visible !important;
        }
        
        .dayContainer {
            width: 100% !important;
            min-width: 100% !important;
            max-width: 100% !important;
            padding: 0 !important;
            justify-content: space-between !important;
        }
        
        .flatpickr-rContainer {
            width: 100% !important;
        }

        /* Recurring options styling */
        .recurring-options {
            display: none;
            animation: fadeIn 0.3s ease;
        }
        
        .recurring-options.visible {
            display: block;
        }
        
        .recurrence-patterns {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
            gap: 0.75rem;
            margin-top: 1rem;
        }
        
        .recurrence-pattern {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 0.75rem;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .recurrence-pattern:hover {
            border-color: #c7d2fe;
            background-color: #f8fafc;
        }
        
        .recurrence-pattern.selected {
            border-color: #6366f1;
            background-color: #e0e7ff;
        }
        
        .recurrence-pattern i {
            font-size: 1.5rem;
            margin-bottom: 0.5rem;
            color: #64748b;
        }
        
        .recurrence-pattern.selected i {
            color: #4f46e5;
        }
        
        .recurrence-pattern span {
            font-size: 0.875rem;
            text-align: center;
            color: #64748b;
        }
        
        .recurrence-pattern.selected span {
            color: #4f46e5;
            font-weight: 500;
        }

        /* Schedule options styling */
        .schedule-options {
            display: none;
            animation: fadeIn 0.3s ease;
        }
        
        .schedule-options.visible {
            display: block;
        }

        :root {
            --primary-color: #4285f4;
            --secondary-color: #34a853;
            --background-color: #ffffff;
            --text-color: #333333;
            --card-bg: #f8f9fa;
            --border-color: #e0e0e0;
            --shadow-color: rgba(0, 0, 0, 0.1);
            --transition-speed: 0.4s;
        }

        /* Dark Mode */
        .dark-mode {
            --primary-color: #8ab4f8;
            --secondary-color: #81c995;
            --background-color: #121212;
            --text-color: #e0e0e0;
            --card-bg: #1e1e1e;
            --border-color: #333333;
            --shadow-color: rgba(0, 0, 0, 0.3);
        }

        /* Ocean Theme */
        .ocean-theme {
            --primary-color: #00a1f1;
            --secondary-color: #00c1d4;
            --background-color: #f0f8ff;
            --text-color: #003366;
            --card-bg: #e1f0fa;
            --border-color: #b3d4ff;
        }

        /* Forest Theme */
        .forest-theme {
            --primary-color: #228B22;
            --secondary-color: #2E8B57;
            --background-color: #f0fff0;
            --text-color: #013220;
            --card-bg: #e1fae1;
            --border-color: #98fb98;
        }

        /* Sunset Theme */
        .sunset-theme {
            --primary-color: #FF6B6B;
            --secondary-color: #FFA07A;
            --background-color: #FFF5E6;
            --text-color: #8B0000;
            --card-bg: #FFE8D6;
            --border-color: #FFB347;
        }

        /* Animation for theme change */
        @keyframes fadeIn {
            from { opacity: 0.8; }
            to { opacity: 1; }
        }

        .theme-change {
            animation: fadeIn var(--transition-speed) ease;
        }

        /* Apply transitions to elements that change with theme */
        body {
            background-color: var(--background-color);
            color: var(--text-color);
            transition: background-color var(--transition-speed) ease, 
                        color var(--transition-speed) ease;
        }

        /* Add this to any element that uses theme colors */
        .card, .btn-primary, .btn-secondary, 
        .assignment-section, .section-header, 
        .user-card, .progress-bar, .rank-badge,
        .status-badge, .xp-badge {
            transition: all var(--transition-speed) ease;
        }

        /* Add these new animation styles */
        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        @keyframes fadeOut {
            from { opacity: 1; }
            to { opacity: 0; }
        }
        
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
        
        @keyframes bounceIn {
            0% {
                opacity: 0;
                transform: scale(0.5);
            }
            60% {
                opacity: 1;
                transform: scale(1.1);
            }
            100% {
                transform: scale(1);
            }
        }
        
        /* Notification animations */
        .notification-enter {
            animation: slideIn 0.3s ease-out forwards;
        }
        
        .notification-exit {
            animation: fadeOut 0.3s ease-out forwards;
        }
        
        /* Form section animations */
        .form-section {
            opacity: 0;
            transform: translateY(20px);
            animation: slideIn 0.4s ease-out forwards;
        }
        
        /* Delay each section */
        .form-section:nth-child(1) { animation-delay: 0.1s; }
        .form-section:nth-child(2) { animation-delay: 0.2s; }
        .form-section:nth-child(3) { animation-delay: 0.3s; }
        .form-section:nth-child(4) { animation-delay: 0.4s; }
        .form-section:nth-child(5) { animation-delay: 0.5s; }
        .form-section:nth-child(6) { animation-delay: 0.6s; }
        
        /* Button hover effects */
        .btn-animate:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }
        
        .btn-animate:active {
            transform: translateY(1px);
        }
        
        /* Subtask animations */
        .subtask-enter {
            animation: bounceIn 0.3s ease-out forwards;
        }
        
        .subtask-exit {
            animation: fadeOut 0.2s ease-out forwards;
        }
        
        /* File upload animation */
        .file-upload-hover {
            transition: all 0.3s ease;
        }
        
        .file-upload-hover:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        }
        
        /* Pulse animation for important elements */
        .pulse-animate {
            animation: pulse 2s infinite;
        }
        
        /* Tab content transition */
        .tab-content {
            transition: opacity 0.3s ease, transform 0.3s ease;
        }
        
        .tab-content:not(.active) {
            display: none;
            opacity: 0;
            transform: translateX(10px);
        }
        
        .tab-content.active {
            display: block;
            opacity: 1;
            transform: translateX(0);
        }
        
        /* Loading spinner */
        .spin {
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* File preview styles */
        .file-preview {
            display: flex;
            align-items: center;
            justify-content: space-between;
            background-color: #f8fafc;
            padding: 8px 12px;
            border-radius: 6px;
            margin-bottom: 8px;
            border: 1px solid #e2e8f0;
        }
        
        .file-preview-info {
            display: flex;
            align-items: center;
            overflow: hidden;
        }
        
        .file-preview-name {
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 200px;
        }
        
        .remove-file {
            color: #ef4444;
            cursor: pointer;
            margin-left: 8px;
            transition: all 0.2s ease;
        }
        
        .remove-file:hover {
            transform: scale(1.1);
        }
        
        /* Adjust file list container */
        #fileList {
            max-height: 300px;
            overflow-y: auto;
        }

        /* Validation error styles */
        .is-invalid {
            border-color: #ef4444 !important;
        }
        
        .error-message {
            color: #ef4444;
            font-size: 0.875rem;
            margin-top: 0.25rem;
        }
    </style>
</head>
<body class="<?php echo getBodyClass(); ?>" style="font-size: <?php echo getFontSize(); ?>;">
    <div class="max-w-4xl mx-auto px-4 py-8">
        <div class="flex justify-between items-center mb-8">
            <div>
                <h1 class="text-3xl font-bold text-gray-800">Create New Quest</h1>
                <p class="text-gray-500 mt-1">Design an engaging challenge for your team</p>
            </div>
            <a href="dashboard.php" class="btn-secondary px-5 py-2.5 rounded-lg font-medium flex items-center">
                <i class="fas fa-arrow-left mr-2"></i> Back to Dashboard
            </a>
        </div>

        <?php if ($error): ?>
            <div class="bg-red-50 border-l-4 border-red-500 p-4 mb-6 rounded-lg">
                <div class="flex">
                    <div class="flex-shrink-0">
                        <i class="fas fa-exclamation-circle text-red-500 mt-1 mr-3"></i>
                    </div>
                    <div>
                        <h3 class="text-sm font-medium text-red-800">Error</h3>
                        <div class="mt-1 text-sm text-red-700">
                            <?php echo htmlspecialchars($error); ?>
                        </div>
                    </div>
                </div>
            </div>
        <?php endif; ?>

        <?php if ($success): ?>
            <div class="bg-green-50 border-l-4 border-green-500 p-4 mb-6 rounded-lg">
                <div class="flex">
                    <div class="flex-shrink-0">
                        <i class="fas fa-check-circle text-green-500 mt-1 mr-3"></i>
                    </div>
                    <div>
                        <h3 class="text-sm font-medium text-green-800">Success</h3>
                        <div class="mt-1 text-sm text-green-700">
                            <?php echo htmlspecialchars($success); ?>
                        </div>
                    </div>
                </div>
            </div>
        <?php endif; ?>

        <form method="post" class="card p-8" enctype="multipart/form-data">
            <div class="space-y-6">
                <!-- Basic Information Section -->
                <div>
                    <h2 class="text-xl font-semibold text-gray-800 mb-4 pb-2 border-b border-gray-100">
                        <i class="fas fa-info-circle text-indigo-500 mr-2"></i> Basic Information
                    </h2>
                    
                    <div class="grid grid-cols-1 gap-6">
                        <div>
                            <label for="title" class="block text-sm font-medium text-gray-700 mb-1">Quest Title*</label>
                            <input type="text" id="title" name="title" value="<?php echo htmlspecialchars($title ?? ''); ?>" 
                                   class="w-full px-4 py-2.5 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-100 focus:border-indigo-300"
                                   placeholder="Enter quest title" required maxlength="255">
                        </div>

                        <div>
                            <label for="description" class="block text-sm font-medium text-gray-700 mb-1">Description*</label>
                            <textarea id="description" name="description" rows="4"
                                      class="w-full px-4 py-2.5 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-100 focus:border-indigo-300"
                                      placeholder="Describe the quest requirements and objectives" required maxlength="2000"><?php echo htmlspecialchars($description ?? ''); ?></textarea>
                        </div>

                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                                <label for="category_id" class="block text-sm font-medium text-gray-700 mb-1">Category*</label>
                                <select name="category_id" id="category_id" 
                                        class="w-full px-4 py-2.5 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-100 focus:border-indigo-300" required>
                                    <option value="">-- Select Category --</option>
                                    <?php foreach ($categories as $category): ?>
                                        <option value="<?php echo $category['id']; ?>" <?php echo (isset($category_id) && $category_id == $category['id']) ? 'selected' : ''; ?>>
                                            <?php if ($category['icon']): ?>
                                                <i class="<?php echo htmlspecialchars($category['icon']); ?> category-icon"></i>
                                            <?php endif; ?>
                                            <?php echo htmlspecialchars($category['name']); ?>
                                        </option>
                                    <?php endforeach; ?>
                                </select>
                            </div>
                            <div>
                                <label for="due_date" class="block text-sm font-medium text-gray-700 mb-1">Due Date (Optional)</label>
                                <input type="text" id="due_date" name="due_date" 
                                       class="w-full px-4 py-2.5 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-100 focus:border-indigo-300"
                                       placeholder="Select due date"
                                       value="<?php echo htmlspecialchars($due_date ?? ''); ?>">
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Reward & Settings Section -->
                <div>
                    <h2 class="text-xl font-semibold text-gray-800 mb-4 pb-2 border-b border-gray-100">
                        <i class="fas fa-gem text-indigo-500 mr-2"></i> Reward & Settings
                    </h2>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label for="xp" class="block text-sm font-medium text-gray-700 mb-1">XP Reward*</label>
                            <div class="xp-input-container">
                                <input type="number" id="xp" name="xp" value="<?php echo htmlspecialchars($xp ?? 10); ?>"
                                       class="w-full px-4 py-2.5 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-100 focus:border-indigo-300"
                                       min="1" max="100" required>
                                <span class="xp-badge">XP</span>
                            </div>
                            <p class="mt-1 text-xs text-gray-500">XP value between 1-100 based on quest difficulty</p>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Quest Type</label>
                            <div class="flex space-x-4">
                                <label class="inline-flex items-center">
                                    <input type="radio" name="quest_type" value="single" class="h-4 w-4 text-indigo-600 focus:ring-indigo-500" 
                                           <?php echo ($quest_type === 'single' || empty($quest_type)) ? 'checked' : ''; ?>>
                                    <span class="ml-2 text-gray-700">Single Quest</span>
                                </label>
                                <label class="inline-flex items-center">
                                    <input type="radio" name="quest_type" value="recurring" class="h-4 w-4 text-indigo-600 focus:ring-indigo-500"
                                           <?php echo ($quest_type === 'recurring') ? 'checked' : ''; ?>>
                                    <span class="ml-2 text-gray-700">Recurring Quest</span>
                                </label>
                            </div>
                        </div>
                    </div>

                    <!-- Recurring Options (Hidden by default) -->
                    <div id="recurringOptions" class="mt-4 recurring-options <?php echo ($quest_type === 'recurring') ? 'visible' : ''; ?>">
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Recurrence Pattern*</label>
                                <div class="recurrence-patterns">
                                    <label class="recurrence-pattern <?php echo ($recurrence_pattern === 'daily') ? 'selected' : ''; ?>">
                                        <input type="radio" name="recurrence_pattern" value="daily" class="hidden" 
                                               <?php echo ($recurrence_pattern === 'daily') ? 'checked' : ''; ?>>
                                        <i class="fas fa-redo"></i>
                                        <span>Daily</span>
                                    </label>
                                    <label class="recurrence-pattern <?php echo ($recurrence_pattern === 'weekly') ? 'selected' : ''; ?>">
                                        <input type="radio" name="recurrence_pattern" value="weekly" class="hidden"
                                               <?php echo ($recurrence_pattern === 'weekly') ? 'checked' : ''; ?>>
                                        <i class="fas fa-calendar-week"></i>
                                        <span>Weekly</span>
                                    </label>
                                    <label class="recurrence-pattern <?php echo ($recurrence_pattern === 'monthly') ? 'selected' : ''; ?>">
                                        <input type="radio" name="recurrence_pattern" value="monthly" class="hidden"
                                               <?php echo ($recurrence_pattern === 'monthly') ? 'checked' : ''; ?>>
                                        <i class="fas fa-calendar-alt"></i>
                                        <span>Monthly</span>
                                    </label>
                                    <label class="recurrence-pattern <?php echo ($recurrence_pattern === 'custom') ? 'selected' : ''; ?>">
                                        <input type="radio" name="recurrence_pattern" value="custom" class="hidden"
                                               <?php echo ($recurrence_pattern === 'custom') ? 'checked' : ''; ?>>
                                        <i class="fas fa-cog"></i>
                                        <span>Custom</span>
                                    </label>
                                </div>
                            </div>
                            <div>
                                <label for="recurrence_end_date" class="block text-sm font-medium text-gray-700 mb-1">End Date (Optional)</label>
                                <input type="text" id="recurrence_end_date" name="recurrence_end_date" 
                                       class="w-full px-4 py-2.5 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-100 focus:border-indigo-300"
                                       placeholder="Select end date"
                                       value="<?php echo htmlspecialchars($recurrence_end_date ?? ''); ?>">
                                <p class="mt-1 text-xs text-gray-500">Leave blank for indefinite recurrence</p>
                            </div>
                        </div>
                    </div>

                    <div class="mt-4">
                        <label class="block text-sm font-medium text-gray-700 mb-1">Visibility</label>
                        <div class="flex space-x-4">
                            <label class="inline-flex items-center">
                                <input type="radio" name="visibility" value="public" class="h-4 w-4 text-indigo-600 focus:ring-indigo-500"
                                       <?php echo ($visibility === 'public' || empty($visibility)) ? 'checked' : ''; ?>>
                                <span class="ml-2 text-gray-700">Public (Visible to all)</span>
                            </label>
                            <label class="inline-flex items-center">
                                <input type="radio" name="visibility" value="private" class="h-4 w-4 text-indigo-600 focus:ring-indigo-500"
                                       <?php echo ($visibility === 'private') ? 'checked' : ''; ?>>
                                <span class="ml-2 text-gray-700">Private (Only assigned users)</span>
                            </label>
                        </div>
                    </div>

                    <div class="mt-4 schedule-options">
                        <label for="publish_at" class="block text-sm font-medium text-gray-700 mb-1">Schedule Publish (Optional)</label>
                        <input type="text" id="publish_at" name="publish_at" 
                               class="w-full px-4 py-2.5 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-100 focus:border-indigo-300"
                               placeholder="Select publish date/time"
                               value="<?php echo htmlspecialchars($publish_at ?? ''); ?>">
                        <p class="mt-1 text-xs text-gray-500">Quest will be automatically published at this time</p>
                    </div>
                </div>

                <!-- Subtasks Section -->
                <div>
                    <h2 class="text-xl font-semibold text-gray-800 mb-4 pb-2 border-b border-gray-100">
                        <i class="fas fa-tasks text-indigo-500 mr-2"></i> Subtasks (Optional)
                    </h2>
                    
                    <div id="subtasksContainer" class="space-y-2 mb-4">
                        <?php if (!empty($subtasks)): ?>
                            <?php foreach ($subtasks as $index => $subtask): ?>
                                <?php if (!empty(trim($subtask))): ?>
                                    <div class="subtask-item flex items-center">
                                        <input type="text" name="subtasks[]" value="<?php echo htmlspecialchars(trim($subtask)); ?>" 
                                               class="flex-1 px-4 py-2 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-100 focus:border-indigo-300"
                                               placeholder="Enter subtask description" maxlength="500">
                                        <button type="button" class="remove-subtask ml-2 text-gray-400 hover:text-red-500">
                                            <i class="fas fa-times-circle"></i>
                                        </button>
                                    </div>
                                <?php endif; ?>
                            <?php endforeach; ?>
                        <?php endif; ?>
                    </div>
                    
                    <button type="button" id="addSubtask" class="btn-secondary px-4 py-2 rounded-lg text-sm font-medium">
                        <i class="fas fa-plus mr-2"></i> Add Subtask
                    </button>
                </div>

                <!-- Attachments Section -->
                <div>
                    <h2 class="text-xl font-semibold text-gray-800 mb-4 pb-2 border-b border-gray-100">
                        <i class="fas fa-paperclip text-indigo-500 mr-2"></i> Attachments (Optional)
                    </h2>
                    
                    <div class="border-2 border-dashed border-gray-200 rounded-lg p-6 text-center file-upload-hover">
                        <input type="file" id="attachments" name="attachments[]" multiple 
                               class="hidden" accept=".pdf,.jpg,.jpeg,.png">
                        <label for="attachments" class="cursor-pointer">
                            <div class="flex flex-col items-center justify-center">
                                <i class="fas fa-cloud-upload-alt text-3xl text-indigo-500 mb-2"></i>
                                <p class="text-sm text-gray-600 mb-1">
                                    <span class="font-medium text-indigo-600">Click to upload</span> or drag and drop
                                </p>
                                <p class="text-xs text-gray-500">PDF, JPG, PNG (Max 5MB each)</p>
                            </div>
                        </label>
                    </div>
                    <div id="fileList" class="mt-2 space-y-2"></div>
                </div>

                <!-- Assignment Section -->
                <div id="assignmentSection">
                    <h2 class="text-xl font-semibold text-gray-800 mb-4 pb-2 border-b border-gray-100 flex justify-between items-center">
                        <span>
                            <i class="fas fa-users text-indigo-500 mr-2"></i> Assignment (Required)
                        </span>
                        <button type="button" id="removeAllEmployees" class="text-sm text-red-500 hover:text-red-700 hidden">
                            <i class="fas fa-times-circle mr-1"></i> Remove all items
                        </button>
                    </h2>
                    
                    <div class="assignment-tabs">
                        <div class="assignment-tab active" data-tab="individual">Assign to Individuals</div>
                        <div class="assignment-tab" data-tab="group">Assign to Group</div>
                    </div>
                    
                    <div class="tab-content active" id="individualTab">
                        <label class="block text-sm font-medium text-gray-700 mb-1">Select Employees*</label>
                        <select name="assign_to[]" id="assign_to" multiple="multiple" 
                                class="w-full">
                            <?php foreach ($employees as $employee): ?>
                                <option value="<?php echo $employee['employee_id']; ?>"
                                    <?php echo in_array($employee['employee_id'], $assign_to) ? 'selected' : ''; ?>>
                                    <?php echo htmlspecialchars($employee['full_name']); ?>
                                </option>
                            <?php endforeach; ?>
                        </select>
                    </div>
                    
                    <div class="tab-content" id="groupTab">
                        <label class="block text-sm font-medium text-gray-700 mb-1">Select Group*</label>
                        <select name="assign_group" id="assign_group" 
                                class="w-full px-4 py-2.5 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-100 focus:border-indigo-300">
                            <option value="">-- Select Group --</option>
                            <?php foreach ($groups as $group): ?>
                                <option value="<?php echo $group['id']; ?>"
                                    <?php echo ($assign_group == $group['id']) ? 'selected' : ''; ?>>
                                    <?php echo htmlspecialchars($group['group_name']); ?>
                                </option>
                            <?php endforeach; ?>
                        </select>
                        
                        <div id="groupMembersContainer" class="mt-4">
                            <label class="block text-sm font-medium text-gray-700 mb-1">Group Members</label>
                            <div id="groupMembersList" class="bg-gray-50 p-3 rounded-lg min-h-20">
                                <p class="text-sm text-gray-500">Select a group to view members</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Submit Button -->
                <div class="pt-4">
                    <button type="submit" class="btn-primary px-6 py-3 rounded-lg font-medium w-full">
                        <i class="fas fa-plus-circle mr-2"></i> Create Quest
                    </button>
                </div>
            </div>
        </form>
    </div>

    <!-- JavaScript Libraries -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script>
        $(document).ready(function() {
            // Initialize Select2 for employee selection with enhanced search
            $('#assign_to').select2({
                placeholder: "Search by name or employee ID...",
                allowClear: false,
                width: '100%',
                templateResult: formatEmployee,
                templateSelection: formatEmployeeSelection,
                escapeMarkup: function(m) { return m; },
                matcher: function(params, data) {
                    // Always return the object if there's no search term
                    if ($.trim(params.term) === '') {
                        return data;
                    }
                    
                    // Convert search term to lowercase for case-insensitive matching
                    var term = params.term.toLowerCase();
                    
                    // Check if the term matches either employee ID or name
                    var idMatch = data.element.value.toLowerCase().indexOf(term) > -1;
                    var textMatch = data.text.toLowerCase().indexOf(term) > -1;
                    
                    return idMatch || textMatch;
                },
                closeOnSelect: false
            }).on('select2:select select2:unselect', function() {
                updateRemoveAllButton();
            });

            // Function to update the remove all button text and visibility
            function updateRemoveAllButton() {
                var selectedCount = $('#assign_to').select2('data').length;
                var $removeAll = $('#removeAllEmployees');
                
                if (selectedCount > 0) {
                    $removeAll.show();
                } else {
                    $removeAll.hide();
                }
            }

            // Handle remove all button click
            $('#removeAllEmployees').click(function() {
                $('#assign_to').val(null).trigger('change');
                $(this).hide();
            });

            // Call it initially in case there are pre-selected items
            updateRemoveAllButton();

            // Format how each employee appears in the dropdown results
            function formatEmployee(employee) {
                if (!employee.id) return employee.text;
                
                // Create a container for the employee info
                var $employee = $('<span class="flex items-center"></span>');
                
                // Add the employee name (bold) and ID (gray)
                $employee.append('<span class="font-medium">' + employee.text + '</span>');
                $employee.append('<span class="text-gray-500 text-sm ml-2">ID: ' + employee.id + '</span>');
                
                return $employee;
            }

            // Format how selected employees appear in the input field
            function formatEmployeeSelection(employee) {
                if (!employee.id) return employee.text;
                
                // Create a clean container for the selected employee
                var $container = $('<span class="selected-employee"></span>');
                
                // Add the employee name (bold) and ID (gray)
                $container.append('<span class="font-medium">' + employee.text + '</span>');
                $container.append('<span class="text-gray-500 text-sm ml-2">ID: ' + employee.id + '</span>');
                
                return $container;
            }

            // Initialize Select2 for category selection with icons
            function formatCategory(category) {
                if (!category.id) return category.text;
                var $icon = $(category.element).find('.category-icon').clone();
                var $category = $('<span></span>');
                $category.append($icon);
                $category.append(' ' + category.text);
                return $category;
            }
            
            $('#category_id').select2({
                templateResult: formatCategory,
                templateSelection: formatCategory,
                escapeMarkup: function(m) { return m; },
                width: '100%'
            });

            // Initialize date pickers with fixed year selection and Saturday visibility
            const dateConfig = {
                enableTime: false,
                dateFormat: "Y-m-d",
                minDate: "today",
                static: true,
                monthSelectorType: 'static',
                onReady: function(selectedDates, dateStr, instance) {
                    // Fix for year dropdown
                    instance.yearNav.addEventListener('click', function(e) {
                        e.stopPropagation();
                    });
                }
            };

            $('#due_date').flatpickr(dateConfig);
            $('#recurrence_end_date').flatpickr(dateConfig);
            
            // Initialize datetime picker for publish_at
            $('#publish_at').flatpickr({
                enableTime: true,
                dateFormat: "Y-m-d H:i",
                minDate: "today",
                static: true,
                monthSelectorType: 'static',
                onReady: function(selectedDates, dateStr, instance) {
                    // Fix for year dropdown
                    instance.yearNav.addEventListener('click', function(e) {
                        e.stopPropagation();
                    });
                }
            });

            // Tab switching functionality
            $('.assignment-tab').click(function() {
                const tabId = $(this).data('tab');
                
                // Update active tab
                $('.assignment-tab').removeClass('active');
                $(this).addClass('active');
                
                // Update active content
                $('.tab-content').removeClass('active');
                $(`#${tabId}Tab`).addClass('active');
            });

            // Show/hide recurring options based on quest type
            $('input[name="quest_type"]').change(function() {
                if ($(this).val() === 'recurring') {
                    $('#recurringOptions').addClass('visible');
                } else {
                    $('#recurringOptions').removeClass('visible');
                }
            });

            // Subtask management
            $('#addSubtask').click(function() {
                const subtaskHtml = `
                    <div class="subtask-item flex items-center mt-2">
                        <input type="text" name="subtasks[]" 
                               class="flex-1 px-4 py-2 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-100 focus:border-indigo-300"
                               placeholder="Enter subtask description" maxlength="500">
                        <button type="button" class="remove-subtask ml-2 text-gray-400 hover:text-red-500">
                            <i class="fas fa-times-circle"></i>
                        </button>
                    </div>
                `;
                $('#subtasksContainer').append(subtaskHtml);
            });

            $(document).on('click', '.remove-subtask', function() {
                $(this).closest('.subtask-item').remove();
            });

            // Group member loading
            $('#assign_group').change(function() {
                const groupId = $(this).val();
                if (!groupId) {
                    $('#groupMembersList').html('<p class="text-sm text-gray-500">Select a group to view members</p>');
                    return;
                }

                $('#groupMembersList').html('<p class="text-sm text-gray-500">Loading members...</p>');

                $.ajax({
                    url: 'create_quest.php?ajax=get_group_members&group_id=' + groupId,
                    type: 'GET',
                    dataType: 'json',
                    success: function(response) {
                        if (response.success && response.members.length > 0) {
                            let html = '<ul class="space-y-1">';
                            response.members.forEach(member => {
                                html += `<li class="text-sm text-gray-700">${member.full_name} <span class="text-gray-500">(ID: ${member.employee_id})</span></li>`;
                            });
                            html += '</ul>';
                            $('#groupMembersList').html(html);
                        } else {
                            $('#groupMembersList').html('<p class="text-sm text-gray-500">No members in this group</p>');
                        }
                    },
                    error: function() {
                        $('#groupMembersList').html('<p class="text-sm text-red-500">Error loading members</p>');
                    }
                });
            });

            // File upload preview with validation and remove functionality
            const fileList = $('#fileList');
            let filesToUpload = [];
            
            $('#attachments').change(function() {
                handleFiles(this.files);
            });

            function handleFiles(files) {
                const allowedTypes = ['application/pdf', 'image/jpeg', 'image/png'];
                const maxSize = 5 * 1024 * 1024; // 5MB
                let hasInvalidFiles = false;

                for (let i = 0; i < files.length; i++) {
                    const file = files[i];
                    const isValidType = allowedTypes.includes(file.type);
                    const isValidSize = file.size <= maxSize;
                    
                    if (!isValidType || !isValidSize) {
                        hasInvalidFiles = true;
                        fileList.append(`
                            <div class="flex items-center justify-between bg-red-50 p-2 rounded border border-red-200">
                                <div class="flex items-center">
                                    <i class="fas fa-exclamation-circle text-red-500 mr-2"></i>
                                    <span class="text-sm text-red-700 truncate max-w-xs">${file.name}</span>
                                </div>
                                <div class="text-xs text-red-500">
                                    ${!isValidType ? 'Invalid file type' : ''}
                                    ${!isValidType && !isValidSize ? ' • ' : ''}
                                    ${!isValidSize ? 'File too large' : ''}
                                </div>
                            </div>
                        `);
                    } else {
                        // Add to filesToUpload array if not already there
                        if (!filesToUpload.some(f => f.name === file.name && f.size === file.size)) {
                            filesToUpload.push(file);
                            renderFileList();
                        }
                    }
                }

                if (hasInvalidFiles) {
                    fileList.prepend(`
                        <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-3 mb-2 rounded">
                            <div class="flex items-center">
                                <i class="fas fa-exclamation-triangle mr-2"></i>
                                <span>Some files are invalid and won't be uploaded</span>
                            </div>
                        </div>
                    `);
                }

                // Reset the file input to allow selecting the same file again
                $('#attachments').val('');
            }

            function renderFileList() {
                fileList.empty();
                
                if (filesToUpload.length === 0) {
                    return;
                }
                
                filesToUpload.forEach((file, index) => {
                    const fileSizeMB = (file.size / 1024 / 1024).toFixed(2);
                    const fileIcon = file.type === 'application/pdf' ? 'fa-file-pdf' : 
                                    file.type.startsWith('image/') ? 'fa-file-image' : 'fa-file';
                    
                    fileList.append(`
                        <div class="file-preview" data-index="${index}">
                            <div class="file-preview-info">
                                <i class="fas ${fileIcon} text-gray-500 mr-2"></i>
                                <span class="file-preview-name text-sm text-gray-700" title="${file.name}">${file.name}</span>
                                <span class="text-xs text-gray-500 ml-2">${fileSizeMB} MB</span>
                            </div>
                            <i class="fas fa-times remove-file" data-index="${index}"></i>
                        </div>
                    `);
                });
            }

            // Handle file removal
            fileList.on('click', '.remove-file', function(e) {
                e.stopPropagation();
                const index = $(this).data('index');
                filesToUpload.splice(index, 1);
                renderFileList();
            });

            // Form validation
            $('form').submit(function(e) {
                let isValid = true;
                
                // Clear previous errors
                $('.is-invalid').removeClass('is-invalid');
                $('.error-message').remove();
                
                // Validate at least one assignment method
                const assignTo = $('#assign_to').val();
                const assignGroup = $('#assign_group').val();
                if ((!assignTo || assignTo.length === 0) && !assignGroup) {
                    $('#assign_to').addClass('is-invalid');
                    $('#assign_group').addClass('is-invalid');
                    $('#assignmentSection').append('<p class="error-message text-red-500 text-sm mt-1">You must assign to at least one employee or group</p>');
                    isValid = false;
                }
                
                // Validate recurring quest options
                if ($('input[name="quest_type"]:checked').val() === 'recurring' && !$('input[name="recurrence_pattern"]:checked').val()) {
                    $('#recurringOptions').addClass('is-invalid');
                    $('#recurringOptions').append('<p class="error-message text-red-500 text-sm mt-1">Please select a recurrence pattern</p>');
                    isValid = false;
                }
                
                // Validate subtasks length
                $('input[name="subtasks[]"]').each(function() {
                    if ($(this).val().length > 500) {
                        $(this).addClass('is-invalid');
                        $(this).after('<p class="error-message text-red-500 text-sm mt-1">Subtask must be less than 500 characters</p>');
                        isValid = false;
                    }
                });
                
                if (!isValid) {
                    e.preventDefault();
                    // Scroll to first error
                    $('html, body').animate({
                        scrollTop: $('.is-invalid').first().offset().top - 100
                    }, 500);
                } else {
                    // Update form submission to use our filesToUpload array
                    if (filesToUpload.length > 0) {
                        // Create a DataTransfer object to hold our files
                        const dataTransfer = new DataTransfer();
                        filesToUpload.forEach(file => {
                            dataTransfer.items.add(file);
                        });
                        
                        // Replace the file input files with our DataTransfer files
                        $('#attachments')[0].files = dataTransfer.files;
                    }
                }
            });

            // Style for invalid fields
            $(document).on('input change', 'input, select, textarea', function() {
                if ($(this).hasClass('is-invalid')) {
                    $(this).removeClass('is-invalid');
                    $(this).next('.error-message').remove();
                }
            });

            // Drag and drop file upload
            const fileUploadArea = $('.file-upload-hover');
            
            fileUploadArea.on('dragover', function(e) {
                e.preventDefault();
                e.stopPropagation();
                $(this).addClass('border-indigo-400 bg-indigo-50');
            });
            
            fileUploadArea.on('dragleave', function(e) {
                e.preventDefault();
                e.stopPropagation();
                $(this).removeClass('border-indigo-400 bg-indigo-50');
            });
            
            fileUploadArea.on('drop', function(e) {
                e.preventDefault();
                e.stopPropagation();
                $(this).removeClass('border-indigo-400 bg-indigo-50');
                
                const files = e.originalEvent.dataTransfer.files;
                if (files.length > 0) {
                    handleFiles(files);
                }
            });
        });
    </script>
</body>
</html>

dashboard.php:
<?php
require_once 'includes/config.php';
require_once 'includes/functions.php';

// Start session if not already started
if (session_status() === PHP_SESSION_NONE) {
    session_start();
}

// Redirect to login if not logged in
if (!is_logged_in()) {
    header('Location: login.php');
    exit();
}

// Load user settings from database or cookies
if (!isset($_COOKIE['theme'])) {
    try {
        // Get user settings from database
        $stmt = $pdo->prepare("SELECT us.theme, us.dark_mode, us.font_size 
                              FROM user_settings us
                              JOIN users u ON us.user_id = u.id
                              WHERE u.employee_id = ?");
        $stmt->execute([$_SESSION['employee_id']]);
        $settings = $stmt->fetch(PDO::FETCH_ASSOC);

        if ($settings) {
            // Set cookies to persist theme across sessions (1 year expiration)
            setcookie('theme', $settings['theme'], time() + (86400 * 365), "/");
            setcookie('dark_mode', $settings['dark_mode'] ? '1' : '0', time() + (86400 * 365), "/");
            setcookie('font_size', $settings['font_size'], time() + (86400 * 365), "/");
            
            // Also set session for current request
            $_SESSION['theme'] = $settings['theme'];
            $_SESSION['dark_mode'] = (bool)$settings['dark_mode'];
            $_SESSION['font_size'] = $settings['font_size'];
        } else {
            // Set default theme settings in cookies and database
            $default_theme = 'default';
            $default_dark_mode = 0;
            $default_font_size = 'medium';
            
            // Insert default settings into database
            $stmt = $pdo->prepare("INSERT INTO user_settings (user_id, theme, dark_mode, font_size) 
                                 SELECT id, ?, ?, ? FROM users WHERE employee_id = ?");
            $stmt->execute([
                $default_theme,
                $default_dark_mode,
                $default_font_size,
                $_SESSION['employee_id']
            ]);
            
            // Set cookies with long expiration
            setcookie('theme', $default_theme, time() + (86400 * 365), "/");
            setcookie('dark_mode', $default_dark_mode, time() + (86400 * 365), "/");
            setcookie('font_size', $default_font_size, time() + (86400 * 365), "/");
            
            // Set session for current request
            $_SESSION['theme'] = $default_theme;
            $_SESSION['dark_mode'] = (bool)$default_dark_mode;
            $_SESSION['font_size'] = $default_font_size;
        }
    } catch (PDOException $e) {
        error_log("Error loading user settings: " . $e->getMessage());
        // Fallback to default settings in cookies
        $default_theme = 'default';
        $default_dark_mode = 0;
        $default_font_size = 'medium';
        
        setcookie('theme', $default_theme, time() + (86400 * 365), "/");
        setcookie('dark_mode', $default_dark_mode, time() + (86400 * 365), "/");
        setcookie('font_size', $default_font_size, time() + (86400 * 365), "/");
        
        // Set session for current request
        $_SESSION['theme'] = $default_theme;
        $_SESSION['dark_mode'] = (bool)$default_dark_mode;
        $_SESSION['font_size'] = $default_font_size;
    }
} else {
    // If cookies exist but session vars don't, set session vars from cookies
    if (!isset($_SESSION['theme'])) {
        $_SESSION['theme'] = $_COOKIE['theme'];
        $_SESSION['dark_mode'] = $_COOKIE['dark_mode'] === '1';
        $_SESSION['font_size'] = $_COOKIE['font_size'];
    }
}

// Handle theme settings update
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['update_theme_settings'])) {
    $theme = $_POST['theme'] ?? 'default';
    $dark_mode = isset($_POST['dark_mode']) ? 1 : 0;
    $font_size = $_POST['font_size'] ?? 'medium';
    
    try {
        // Update database
        $stmt = $pdo->prepare("UPDATE user_settings 
                              SET theme = ?, dark_mode = ?, font_size = ?
                              WHERE user_id = (SELECT id FROM users WHERE employee_id = ?)");
        $stmt->execute([
            $theme,
            $dark_mode,
            $font_size,
            $_SESSION['employee_id']
        ]);
        
        // Update session variables
        $_SESSION['theme'] = $theme;
        $_SESSION['dark_mode'] = (bool)$dark_mode;
        $_SESSION['font_size'] = $font_size;
        
        // Update cookies with long expiration (1 year)
        setcookie('theme', $theme, time() + (86400 * 365), "/");
        setcookie('dark_mode', $dark_mode ? '1' : '0', time() + (86400 * 365), "/");
        setcookie('font_size', $font_size, time() + (86400 * 365), "/");
        
        $success = "Theme settings updated successfully!";
    } catch (PDOException $e) {
        error_log("Error updating theme settings: " . $e->getMessage());
        $error = "Error updating theme settings";
    }
}

$full_name = $_SESSION['full_name'] ?? 'User';
$employee_id = $_SESSION['employee_id'] ?? 'N/A';
$role = $_SESSION['role'] ?? 'quest_taker';
$email = $_SESSION['email'] ?? '';
$current_theme = $_SESSION['theme'] ?? 'default';
$dark_mode = $_SESSION['dark_mode'] ?? false;
$font_size = $_SESSION['font_size'] ?? 'medium';

// Set permissions based on role
$is_taker = in_array($role, ['quest_taker', 'hybrid']);
$is_giver = in_array($role, ['quest_giver', 'hybrid']);

// Pagination settings
$items_per_page = 5; // Number of items to show per page
$current_page = isset($_GET['page']) ? (int)$_GET['page'] : 1;
if ($current_page < 1) $current_page = 1;

// Handle form submissions
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $error = '';
    $success = '';
    
    // Handle group creation
    if ($is_taker && isset($_POST['create_group'])) {
        $group_name = trim($_POST['group_name'] ?? '');
        $group_description = trim($_POST['group_description'] ?? '');
        
        if (empty($group_name)) {
            $error = "Group name is required";
        } else {
            try {
                // Check if user is already in a group
                $stmt = $pdo->prepare("SELECT COUNT(*) FROM group_members WHERE employee_id = ?");
                $stmt->execute([$employee_id]);
                $in_group = $stmt->fetchColumn();
                
                if ($in_group > 0) {
                    $error = "You can only be in one group at a time";
                } else {
                    $pdo->beginTransaction();
                    
                    // Create the group
                    $stmt = $pdo->prepare("INSERT INTO employee_groups 
                                         (group_name, description, created_by) 
                                         VALUES (?, ?, ?)");
                    $stmt->execute([$group_name, $group_description, $employee_id]);
                    $group_id = $pdo->lastInsertId();
                    
                    // Add creator to the group
                    $stmt = $pdo->prepare("INSERT INTO group_members 
                                         (group_id, employee_id) 
                                         VALUES (?, ?)");
                    $stmt->execute([$group_id, $employee_id]);
                    
                    $pdo->commit();
                    $success = "Group created successfully!";
                }
            } catch (PDOException $e) {
                $pdo->rollBack();
                error_log("Database error creating group: " . $e->getMessage());
                $error = "Error creating group";
            }
        }
    }
    
    // Handle joining a group
    if ($is_taker && isset($_POST['join_group'])) {
        $group_id = $_POST['group_id'] ?? 0;
        
        try {
            // Check if user is already in a group
            $stmt = $pdo->prepare("SELECT COUNT(*) FROM group_members WHERE employee_id = ?");
            $stmt->execute([$employee_id]);
            $in_group = $stmt->fetchColumn();
            
            if ($in_group > 0) {
                $error = "You can only be in one group at a time";
            } else {
                // Add user to the group
                $stmt = $pdo->prepare("INSERT INTO group_members 
                                     (group_id, employee_id) 
                                     VALUES (?, ?)");
                $stmt->execute([$group_id, $employee_id]);
                
                $success = "You have joined the group successfully!";
            }
        } catch (PDOException $e) {
            error_log("Database error joining group: " . $e->getMessage());
            $error = "Error joining group";
        }
    }
    
    // Handle leaving a group
    if ($is_taker && isset($_POST['leave_group'])) {
        try {
            $stmt = $pdo->prepare("DELETE FROM group_members WHERE employee_id = ?");
            $stmt->execute([$employee_id]);
            
            // Check if group is now empty and delete it if so
            $stmt = $pdo->prepare("SELECT group_id FROM group_members WHERE employee_id = ?");
            $stmt->execute([$employee_id]);
            $group_id = $stmt->fetchColumn();
            
            $stmt = $pdo->prepare("SELECT COUNT(*) FROM group_members WHERE group_id = ?");
            $stmt->execute([$group_id]);
            $member_count = $stmt->fetchColumn();
            
            if ($member_count == 0) {
                $stmt = $pdo->prepare("DELETE FROM employee_groups WHERE id = ?");
                $stmt->execute([$group_id]);
            }
            
            $success = "You have left the group";
        } catch (PDOException $e) {
            error_log("Database error leaving group: " . $e->getMessage());
            $error = "Error leaving group";
        }
    }
    
    // Handle quest submission (for takers)
    if ($is_taker && isset($_POST['submit_quest'])) {
        $quest_id = $_POST['quest_id'] ?? 0;
        $submissionType = $_POST['submission_type'] ?? '';
        
        if ($submissionType === 'file' && isset($_FILES['quest_file'])) {
            // File upload handling
            $uploadDir = 'uploads/quest_submissions/';
            if (!file_exists($uploadDir)) {
                mkdir($uploadDir, 0777, true);
            }
            
            $fileName = basename($_FILES['quest_file']['name']);
            $fileTmp = $_FILES['quest_file']['tmp_name'];
            $fileSize = $_FILES['quest_file']['size'];
            $fileExt = strtolower(pathinfo($fileName, PATHINFO_EXTENSION));
            
            $allowedExtensions = ['pdf', 'doc', 'docx', 'jpg', 'jpeg', 'png', 'txt', 'zip'];
            $maxFileSize = 5 * 1024 * 1024; // 5MB
            
            if (!in_array($fileExt, $allowedExtensions)) {
                $error = "Invalid file type. Allowed types: " . implode(', ', $allowedExtensions);
            } elseif ($fileSize > $maxFileSize) {
                $error = "File too large. Max size: 5MB";
            } else {
                $newFileName = $employee_id . '_' . time() . '.' . $fileExt;
                $filePath = $uploadDir . $newFileName;
                
                if (move_uploaded_file($fileTmp, $filePath)) {
                    try {
                        $stmt = $pdo->prepare("INSERT INTO quest_submissions 
                                            (employee_id, quest_id, submission_type, file_path, status, submitted_at)
                                            VALUES (?, ?, 'file', ?, 'pending', NOW())");
                        $stmt->execute([$employee_id, $quest_id, $filePath]);
                        
                        // Update quest status to submitted
                        $stmt = $pdo->prepare("UPDATE user_quests SET status = 'submitted' 
                                             WHERE employee_id = ? AND quest_id = ?");
                        $stmt->execute([$employee_id, $quest_id]);
                        
                        // Record XP gain for submitting quest
                        $stmt = $pdo->prepare("INSERT INTO xp_history 
                                             (employee_id, xp_change, source_type, source_id, description)
                                             VALUES (?, ?, 'quest_submit', ?, 'Quest submission reward')");
                        $stmt->execute([$employee_id, 10, $quest_id]);
                        
                        $success = "Quest submitted successfully! +10 XP";
                    } catch (PDOException $e) {
                        error_log("Database error submitting quest: " . $e->getMessage());
                        $error = "Error submitting quest";
                        unlink($filePath); // Remove uploaded file if DB insert failed
                    }
                } else {
                    $error = "Error uploading file";
                }
            }
        } elseif ($submissionType === 'link') {
            // Google Drive link handling
            $drive_link = $_POST['drive_link'] ?? '';
            
            if (filter_var($drive_link, FILTER_VALIDATE_URL) === false) {
                $error = "Invalid URL format";
            } else {
                try {
                    $stmt = $pdo->prepare("INSERT INTO quest_submissions 
                                          (employee_id, quest_id, submission_type, drive_link, status, submitted_at)
                                          VALUES (?, ?, 'link', ?, 'pending', NOW())");
                    $stmt->execute([$employee_id, $quest_id, $drive_link]);
                    
                    // Update quest status to submitted
                    $stmt = $pdo->prepare("UPDATE user_quests SET status = 'submitted' 
                                         WHERE employee_id = ? AND quest_id = ?");
                    $stmt->execute([$employee_id, $quest_id]);
                    
                    // Record XP gain for submitting quest
                    $stmt = $pdo->prepare("INSERT INTO xp_history 
                                         (employee_id, xp_change, source_type, source_id, description)
                                         VALUES (?, ?, 'quest_submit', ?, 'Quest submission reward')");
                    $stmt->execute([$employee_id, 10, $quest_id]);
                    
                    $success = "Quest submitted successfully! +10 XP";
                } catch (PDOException $e) {
                    error_log("Database error submitting quest: " . $e->getMessage());
                    $error = "Error submitting quest";
                }
            }
        }
    }
    
    // Handle quest deletion
if ($is_giver && isset($_POST['delete_quest'])) {
    $quest_id = $_POST['quest_id'] ?? 0;
    
    try {
        $pdo->beginTransaction();
        
        // First delete submissions related to this quest
        $stmt = $pdo->prepare("DELETE FROM quest_submissions WHERE quest_id = ?");
        $stmt->execute([$quest_id]);
        
        // Then delete user quest assignments
        $stmt = $pdo->prepare("DELETE FROM user_quests WHERE quest_id = ?");
        $stmt->execute([$quest_id]);
        
        // Then delete XP history related to this quest
        $stmt = $pdo->prepare("DELETE FROM xp_history WHERE source_type = 'quest_complete' AND source_id = ?");
        $stmt->execute([$quest_id]);
        
        // Finally delete the quest itself
        $stmt = $pdo->prepare("DELETE FROM quests WHERE id = ? AND created_by = ?");
        $stmt->execute([$quest_id, $employee_id]);
        
        $affected_rows = $stmt->rowCount();
        
        if ($affected_rows > 0) {
            $pdo->commit();
            $success = "Quest deleted successfully!";
        } else {
            $pdo->rollBack();
            $error = "Quest not found or you don't have permission to delete it";
        }
    } catch (PDOException $e) {
        $pdo->rollBack();
        error_log("Database error deleting quest: " . $e->getMessage());
        $error = "Error deleting quest";
    }
}
    // Handle quest approval/rejection (for givers)
    if ($is_giver && isset($_POST['review_submission'])) {
        $submission_id = $_POST['submission_id'] ?? 0;
        $action = $_POST['action'] ?? '';
        $feedback = $_POST['feedback'] ?? '';
        $additional_xp = intval($_POST['additional_xp'] ?? 0);
        
        if (in_array($action, ['approve', 'reject'])) {
            try {
                // Update submission status
                $stmt = $pdo->prepare("UPDATE quest_submissions 
                                      SET status = ?, feedback = ?, reviewed_by = ?, reviewed_at = NOW(), additional_xp = ?
                                      WHERE id = ?");
                $new_status = ($action === 'approve') ? 'approved' : 'rejected';
                $stmt->execute([$new_status, $feedback, $employee_id, $additional_xp, $submission_id]);
                
                // If approved, mark quest as completed and award XP
                if ($action === 'approve') {
                    // Get submission details
                    $stmt = $pdo->prepare("SELECT quest_id, employee_id FROM quest_submissions WHERE id = ?");
                    $stmt->execute([$submission_id]);
                    $submission = $stmt->fetch();
                    
                    if ($submission) {
                        // Update user_quests
                        $stmt = $pdo->prepare("UPDATE user_quests 
                                             SET status = 'completed', completed_at = NOW()
                                             WHERE quest_id = ? AND employee_id = ?");
                        $stmt->execute([$submission['quest_id'], $submission['employee_id']]);
                        
                        // Get XP value
                        $stmt = $pdo->prepare("SELECT xp FROM quests WHERE id = ?");
                        $stmt->execute([$submission['quest_id']]);
                        $xp = $stmt->fetchColumn();
                        
                        // Total XP including additional XP from reviewer
                        $total_xp = $xp + $additional_xp;
                        
                        // Record XP gain for quest taker
                        $stmt = $pdo->prepare("INSERT INTO xp_history 
                                             (employee_id, xp_change, source_type, source_id, description)
                                             VALUES (?, ?, 'quest_complete', ?, 'Quest completion reward')");
                        $stmt->execute([$submission['employee_id'], $total_xp, $submission['quest_id']]);
                        
                        // Record XP gain for quest giver (reviewer)
                        $stmt = $pdo->prepare("INSERT INTO xp_history 
                                             (employee_id, xp_change, source_type, source_id, description)
                                             VALUES (?, ?, 'quest_review', ?, 'Quest review reward')");
                        $stmt->execute([$employee_id, 15, $submission_id]);
                    }
                }
                
                $success = "Submission $new_status successfully!";
                if ($action === 'approve') {
                    $success .= " +15 XP for reviewing";
                }
            } catch (PDOException $e) {
                error_log("Database error reviewing submission: " . $e->getMessage());
                $error = "Error processing submission";
            }
        }
    }
}

// Fetch data based on role
$available_quests = [];
$active_quests = [];
$submissions = [];
$pending_submissions = [];
$all_quests = [];
$assigned_quests = [];
$user_group = null;
$available_groups = [];
$group_members = [];

try {
    // For quest takers
    if ($is_taker) {
        // Get user's current group
        $stmt = $pdo->prepare("SELECT g.id, g.group_name, g.description 
                              FROM employee_groups g
                              JOIN group_members gm ON g.id = gm.group_id
                              WHERE gm.employee_id = ?");
        $stmt->execute([$employee_id]);
        $user_group = $stmt->fetch(PDO::FETCH_ASSOC);
        
        // Get group members if in a group
        if ($user_group) {
            $stmt = $pdo->prepare("SELECT u.employee_id, u.full_name 
                                 FROM group_members gm
                                 JOIN users u ON gm.employee_id = u.id
                                 WHERE gm.group_id = ?");
            $stmt->execute([$user_group['id']]);
            $group_members = $stmt->fetchAll(PDO::FETCH_ASSOC);
        }
        
        // Get available groups to join (excluding user's current group)
        $stmt = $pdo->prepare("SELECT g.id, g.group_name, g.description, 
                              COUNT(gm.employee_id) as member_count
                              FROM employee_groups g
                              LEFT JOIN group_members gm ON g.id = gm.group_id
                              WHERE g.id NOT IN (
                                  SELECT group_id FROM group_members WHERE employee_id = ?
                              )
                              GROUP BY g.id
                              HAVING member_count < 10
                              ORDER BY g.group_name");
        $stmt->execute([$employee_id]);
        $available_groups = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
        // Get available quests - exclude quests created by the current user
        $stmt = $pdo->prepare("SELECT q.* FROM quests q 
                              LEFT JOIN user_quests uq ON q.id = uq.quest_id AND uq.employee_id = ?
                              WHERE uq.quest_id IS NULL 
                              AND q.status = 'active'
                              AND q.created_by != ?");
        $stmt->execute([$employee_id, $employee_id]);
        $available_quests = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
        // Get active quests (in_progress or submitted) - only those assigned to the user
        $stmt = $pdo->prepare("SELECT q.*, uq.status as user_status FROM quests q 
                              JOIN user_quests uq ON q.id = uq.quest_id 
                              JOIN users u ON uq.employee_id = u.id
                              WHERE u.employee_id = ? 
                              AND (uq.status = 'in_progress' OR uq.status = 'submitted')");
        $stmt->execute([$employee_id]);
        $active_quests = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
        // Get user's submissions with pagination
        // First get total count
        $stmt = $pdo->prepare("SELECT COUNT(*) FROM quest_submissions qs
                              JOIN quests q ON qs.quest_id = q.id
                              LEFT JOIN users u ON qs.reviewed_by = u.id
                              WHERE qs.employee_id = ?");
        $stmt->execute([$employee_id]);
        $total_submissions = $stmt->fetchColumn();
        $total_pages = ceil($total_submissions / $items_per_page);
        
        // Then get paginated results
        $offset = ($current_page - 1) * $items_per_page;
        $stmt = $pdo->prepare("SELECT qs.*, q.title as quest_title, qs.status as submission_status, 
                              q.xp as quest_xp, qs.additional_xp, u.full_name as reviewer_name
                              FROM quest_submissions qs
                              JOIN quests q ON qs.quest_id = q.id
                              LEFT JOIN users u ON qs.reviewed_by = u.id
                              WHERE qs.employee_id = ?
                              ORDER BY qs.submitted_at DESC
                              LIMIT ? OFFSET ?");
        $stmt->bindValue(1, $employee_id);
        $stmt->bindValue(2, $items_per_page, PDO::PARAM_INT);
        $stmt->bindValue(3, $offset, PDO::PARAM_INT);
        $stmt->execute();
        $submissions = $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
    
    // For quest givers
    if ($is_giver) {
        // Get all quests for management (created by this user) with pagination
        // First get total count
        $stmt = $pdo->prepare("SELECT COUNT(*) FROM quests q
                             LEFT JOIN user_quests uq ON q.id = uq.quest_id
                             WHERE q.created_by = ?");
        $stmt->execute([$employee_id]);
        $total_quests = $stmt->fetchColumn();
        $total_pages_quests = ceil($total_quests / $items_per_page);
        
        // Then get paginated results
        $offset = ($current_page - 1) * $items_per_page;
        $stmt = $pdo->prepare("SELECT q.*, 
                             (SELECT COUNT(*) FROM quest_submissions WHERE quest_id = q.id AND status = 'approved') as approved_count,
                             (SELECT COUNT(*) FROM quest_submissions WHERE quest_id = q.id AND status = 'pending') as pending_count,
                             (SELECT COUNT(*) FROM quest_submissions WHERE quest_id = q.id AND status = 'rejected') as rejected_count,
                             COUNT(uq.employee_id) as assigned_count 
                             FROM quests q
                             LEFT JOIN user_quests uq ON q.id = uq.quest_id
                             WHERE q.created_by = ?
                             GROUP BY q.id
                             ORDER BY q.status, q.created_at DESC
                             LIMIT ? OFFSET ?");
        $stmt->bindValue(1, $employee_id);
        $stmt->bindValue(2, $items_per_page, PDO::PARAM_INT);
        $stmt->bindValue(3, $offset, PDO::PARAM_INT);
        $stmt->execute();
        $all_quests = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
        // Get pending submissions for quests created by this user with pagination
        // First get total count
        $stmt = $pdo->prepare("SELECT COUNT(*) FROM quest_submissions qs
                             JOIN users e ON qs.employee_id = e.id
                             JOIN quests q ON qs.quest_id = q.id
                             WHERE qs.status = 'pending'
                             AND q.created_by = ?");
        $stmt->execute([$employee_id]);
        $total_pending = $stmt->fetchColumn();
        $total_pages_pending = ceil($total_pending / $items_per_page);
        
        // Then get paginated results
        $offset = ($current_page - 1) * $items_per_page;
        $stmt = $pdo->prepare("SELECT qs.*, e.full_name as employee_name, q.title as quest_title, 
                              q.xp as base_xp, q.description as quest_description
                              FROM quest_submissions qs
                              JOIN users e ON qs.employee_id = e.id
                              JOIN quests q ON qs.quest_id = q.id
                              WHERE qs.status = 'pending'
                              AND q.created_by = ?
                              ORDER BY qs.submitted_at DESC
                              LIMIT ? OFFSET ?");
        $stmt->bindValue(1, $employee_id);
        $stmt->bindValue(2, $items_per_page, PDO::PARAM_INT);
        $stmt->bindValue(3, $offset, PDO::PARAM_INT);
        $stmt->execute();
        $pending_submissions = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
        // Get all submissions for quests created by this giver with pagination
        // First get total count
        $stmt = $pdo->prepare("SELECT COUNT(*) FROM quest_submissions qs
                             JOIN quests q ON qs.quest_id = q.id
                             JOIN users u ON qs.employee_id = u.id
                             LEFT JOIN users rev ON qs.reviewed_by = rev.id
                             WHERE q.created_by = ?");
        $stmt->execute([$employee_id]);
        $total_all_submissions = $stmt->fetchColumn();
        $total_pages_all_submissions = ceil($total_all_submissions / $items_per_page);
        
        // Then get paginated results
        $offset = ($current_page - 1) * $items_per_page;
        $stmt = $pdo->prepare("SELECT qs.*, q.title as quest_title, u.full_name as employee_name, 
                              q.xp as base_xp, qs.additional_xp, rev.full_name as reviewer_name
                              FROM quest_submissions qs
                              JOIN quests q ON qs.quest_id = q.id
                              JOIN users u ON qs.employee_id = u.id
                              LEFT JOIN users rev ON qs.reviewed_by = rev.id
                              WHERE q.created_by = ?
                              ORDER BY qs.submitted_at DESC
                              LIMIT ? OFFSET ?");
        $stmt->bindValue(1, $employee_id);
        $stmt->bindValue(2, $items_per_page, PDO::PARAM_INT);
        $stmt->bindValue(3, $offset, PDO::PARAM_INT);
        $stmt->execute();
        $all_submissions = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
        // Get quests assigned to this giver (if any)
        $stmt = $pdo->prepare("SELECT q.*, uq.status as user_status 
                              FROM quests q
                              JOIN user_quests uq ON q.id = uq.quest_id
                              JOIN users u ON uq.employee_id = u.id
                              WHERE u.employee_id = ?");
        $stmt->execute([$employee_id]);
        $assigned_quests = $stmt->fetchAll(PDO::FETCH_ASSOC);
    }
    
    // Get user stats
    $stmt = $pdo->prepare("SELECT 
                          (SELECT COUNT(*) FROM user_quests WHERE employee_id = ? AND status = 'completed') as completed_quests,
                          (SELECT SUM(q.xp + IFNULL(qs.additional_xp, 0)) FROM user_quests uq 
                          JOIN quests q ON uq.quest_id = q.id 
                          LEFT JOIN quest_submissions qs ON uq.quest_id = qs.quest_id AND uq.employee_id = qs.employee_id
                          WHERE uq.employee_id = ? AND uq.status = 'completed') as total_xp,
                          (SELECT COUNT(*) FROM quests WHERE created_by = ?) as created_quests,
                          (SELECT COUNT(*) FROM quest_submissions WHERE reviewed_by = ?) as reviewed_submissions");
    $stmt->execute([$employee_id, $employee_id, $employee_id, $employee_id]);
    $stats = $stmt->fetch(PDO::FETCH_ASSOC);
    
    // Calculate level and rank
    $xp_value = $stats['total_xp'] ?? 0;
    $level = floor($xp_value / 50) + 1;
    $rank = "Newbie";
    if ($xp_value >= 200) $rank = "Expert";
    elseif ($xp_value >= 100) $rank = "Adventurer";
    elseif ($xp_value >= 50) $rank = "Explorer";
    
} catch (PDOException $e) {
    error_log("Database error: " . $e->getMessage());
    $error = "Error loading data";
}

// Role-based styling
$role_badge_class = [
    'quest_taker' => 'bg-green-100 text-green-800',
    'quest_giver' => 'bg-blue-100 text-blue-800',
    'hybrid' => 'bg-purple-100 text-purple-800'
][$role] ?? 'bg-gray-100 text-gray-800';

$role_icon_color = [
    'quest_taker' => 'text-green-500',
    'quest_giver' => 'text-blue-500',
    'hybrid' => 'text-purple-500'
][$role] ?? 'text-gray-500';

// Function to get the body class based on theme
function getBodyClass() {
    $theme = 'default';
    $dark_mode = false;
    
    // Always use cookies for theme selection (persists after logout)
    if (isset($_COOKIE['theme'])) {
        $theme = $_COOKIE['theme'];
    }
    if (isset($_COOKIE['dark_mode'])) {
        $dark_mode = $_COOKIE['dark_mode'] === '1';
    }
    
    $classes = [];
    
    if ($dark_mode) {
        $classes[] = 'dark-mode';
    }
    
    if ($theme !== 'default') {
        $classes[] = $theme . '-theme';
    }
    
    return implode(' ', $classes);
}

// Function to get font size CSS
function getFontSize() {
    // Always use cookies for font size (persists after logout)
    if (isset($_COOKIE['font_size'])) {
        $font_size = $_COOKIE['font_size'];
    }
    else {
        $font_size = 'medium';
    }
    
    switch ($font_size) {
        case 'small': return '14px';
        case 'large': return '18px';
        default: return '16px';
    }
}

// Replace the existing generatePagination function with this updated version
function generatePagination($total_pages, $current_page, $base_url = '') {
    // Only show pagination if there are multiple pages OR if there's at least one item
    if ($total_pages <= 1 && $current_page == 1) {
        return '';
    }
    
    $pagination = '<div class="flex justify-center mt-4">';
    $pagination .= '<nav class="inline-flex rounded-md shadow">';
    
    // Previous button
    if ($current_page > 1) {
        $pagination .= '<a href="' . $base_url . '?page=' . ($current_page - 1) . '" class="px-3 py-1 rounded-l-md border border-gray-300 bg-white text-gray-500 hover:bg-gray-50">Previous</a>';
    } else {
        $pagination .= '<span class="px-3 py-1 rounded-l-md border border-gray-300 bg-gray-100 text-gray-400">Previous</span>';
    }
    
    // Page numbers
    $start_page = max(1, $current_page - 2);
    $end_page = min($total_pages, $current_page + 2);
    
    if ($start_page > 1) {
        $pagination .= '<a href="' . $base_url . '?page=1" class="px-3 py-1 border-t border-b border-gray-300 bg-white text-gray-500 hover:bg-gray-50">1</a>';
        if ($start_page > 2) {
            $pagination .= '<span class="px-3 py-1 border-t border-b border-gray-300 bg-white text-gray-500">...</span>';
        }
    }
    
    for ($i = $start_page; $i <= $end_page; $i++) {
        if ($i == $current_page) {
            $pagination .= '<span class="px-3 py-1 border-t border-b border-gray-300 bg-blue-500 text-white">' . $i . '</span>';
        } else {
            $pagination .= '<a href="' . $base_url . '?page=' . $i . '" class="px-3 py-1 border-t border-b border-gray-300 bg-white text-gray-500 hover:bg-gray-50">' . $i . '</a>';
        }
    }
    
    if ($end_page < $total_pages) {
        if ($end_page < $total_pages - 1) {
            $pagination .= '<span class="px-3 py-1 border-t border-b border-gray-300 bg-white text-gray-500">...</span>';
        }
        $pagination .= '<a href="' . $base_url . '?page=' . $total_pages . '" class="px-3 py-1 border-t border-b border-gray-300 bg-white text-gray-500 hover:bg-gray-50">' . $total_pages . '</a>';
    }
    
    // Next button
    if ($current_page < $total_pages) {
        $pagination .= '<a href="' . $base_url . '?page=' . ($current_page + 1) . '" class="px-3 py-1 rounded-r-md border border-gray-300 bg-white text-gray-500 hover:bg-gray-50">Next</a>';
    } else {
        $pagination .= '<span class="px-3 py-1 rounded-r-md border border-gray-300 bg-gray-100 text-gray-400">Next</span>';
    }
    
    $pagination .= '</nav>';
    $pagination .= '</div>';
    
    return $pagination;
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Yoonet - Quest Dashboard</title>
    <link rel="stylesheet" href="assets/css/style.css">
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/themes/prism.min.css" rel="stylesheet" />
    <style>
        :root {
            --primary-color: #4285f4;
            --secondary-color: #34a853;
            --background-color: #ffffff;
            --text-color: #333333;
            --card-bg: #f8f9fa;
            --border-color: #e0e0e0;
            --shadow-color: rgba(0, 0, 0, 0.1);
            --transition-speed: 0.4s;
        }

        /* Dark Mode */
        .dark-mode {
            --primary-color: #8ab4f8;
            --secondary-color: #81c995;
            --background-color: #121212;
            --text-color: #e0e0e0;
            --card-bg: #1e1e1e;
            --border-color: #333333;
            --shadow-color: rgba(0, 0, 0, 0.3);
        }

        /* Ocean Theme */
        .ocean-theme {
            --primary-color: #00a1f1;
            --secondary-color: #00c1d4;
            --background-color: #f0f8ff;
            --text-color: #003366;
            --card-bg: #e1f0fa;
            --border-color: #b3d4ff;
        }

        /* Forest Theme */
        .forest-theme {
            --primary-color: #228B22;
            --secondary-color: #2E8B57;
            --background-color: #f0fff0;
            --text-color: #013220;
            --card-bg: #e1fae1;
            --border-color: #98fb98;
        }

        /* Sunset Theme */
        .sunset-theme {
            --primary-color: #FF6B6B;
            --secondary-color: #FFA07A;
            --background-color: #FFF5E6;
            --text-color: #8B0000;
            --card-bg: #FFE8D6;
            --border-color: #FFB347;
        }

        /* Animation for theme change */
        @keyframes fadeIn {
            from { opacity: 0.8; }
            to { opacity: 1; }
        }

        .theme-change {
            animation: fadeIn var(--transition-speed) ease;
        }

        /* Apply transitions to elements that change with theme */
        body {
            background-color: var(--background-color);
            color: var(--text-color);
            transition: background-color var(--transition-speed) ease, 
                        color var(--transition-speed) ease;
        }

        /* Add this to any element that uses theme colors */
        .card, .btn-primary, .btn-secondary, 
        .assignment-section, .section-header, 
        .user-card, .progress-bar, .rank-badge,
        .status-badge, .xp-badge {
            transition: all var(--transition-speed) ease;
        }

        .section-header {
            position: relative;
            padding-left: 1.5rem;
        }
        .section-header:before {
            content: "";
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 4px;
            border-radius: 2px;
        }
        .taker-section:before {
            background-color: #10b981;
        }
        .giver-section:before {
            background-color: #3b82f6;
        }
        .hybrid-section:before {
            background: linear-gradient(to bottom, #3b82f6, #10b981);
        }
        .file-preview {
            max-width: 100%;
            max-height: 200px;
            object-fit: contain;
            border: 1px solid var(--border-color);
            border-radius: 0.375rem;
            margin-top: 0.5rem;
        }
        .file-item {
            display: flex;
            align-items: center;
            padding: 0.5rem;
            border: 1px solid var(--border-color);
            border-radius: 0.375rem;
            margin-top: 0.5rem;
        }
        .file-icon {
            margin-right: 0.5rem;
            color: var(--primary-color);
        }
        .tab-button {
            padding: 0.5rem 1rem;
            border: 1px solid var(--border-color);
            background-color: var(--card-bg);
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .tab-button.active {
            background-color: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }
        .hidden {
            display: none;
        }
        .role-icon {
            width: 1.5rem;
            height: 1.5rem;
            margin-right: 0.5rem;
        }
        .status-badge {
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem;
            font-size: 0.75rem;
            font-weight: 600;
            transition: all 0.3s ease;
        }
        .status-pending {
            background-color: #fef3c7;
            color: #92400e;
        }
        .status-approved {
            background-color: #d1fae5;
            color: #065f46;
        }
        .status-rejected {
            background-color: #fee2e2;
            color: #991b1b;
        }
        .status-in_progress {
            background-color: #dbeafe;
            color: #1e40af;
        }
        .status-submitted {
            background-color: #f0f9ff;
            color: #0369a1;
        }
        .preview-container {
            max-height: 500px;
            overflow-y: auto;
            border: 1px solid var(--border-color);
            border-radius: 0.375rem;
            padding: 1rem;
            margin-top: 0.5rem;
            background-color: var(--card-bg);
        }
        .xp-badge {
            background-color: #f0f9ff;
            color: #0369a1;
            padding: 0.25rem 0.5rem;
            border-radius: 0.375rem;
            font-size: 0.75rem;
            font-weight: 600;
        }
        .xp-details {
            font-size: 0.75rem;
            color: #6b7280;
        }
        .group-member {
            display: flex;
            align-items: center;
            padding: 0.5rem;
            border: 1px solid var(--border-color);
            border-radius: 0.375rem;
            margin-bottom: 0.5rem;
            transition: all 0.3s ease;
        }
        .group-member-avatar {
            width: 2rem;
            height: 2rem;
            border-radius: 50%;
            background-color: var(--border-color);
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 0.5rem;
            font-weight: bold;
            color: #4b5563;
        }
        .hamburger {
            display: flex;
            flex-direction: column;
            justify-content: space-around;
            width: 2rem;
            height: 2rem;
            background: transparent;
            border: none;
            cursor: pointer;
            padding: 0;
            z-index: 10;
            margin-right: 1rem;
        }
        .hamburger div {
            width: 2rem;
            height: 0.25rem;
            background: var(--text-color);
            border-radius: 10px;
            transition: all 0.3s linear;
            position: relative;
            transform-origin: 1px;
        }
        .mobile-menu {
            position: fixed;
            top: 0;
            left: -300px;
            width: 300px;
            height: 100%;
            background: var(--background-color);
            z-index: 1000;
            transition: left 0.3s ease;
            box-shadow: 2px 0 10px rgba(0,0,0,0.1);
            padding: 20px;
            overflow-y: auto;
        }

         .mobile-menu.open {
            left: 0;
        }
        #backdrop {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 900;
            display: none;
        }
        .close-menu {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            z-index: 1010;
            color: var(--text-color);
        }
        .mobile-menu nav {
            display: flex;
            flex-direction: column;
            gap: 1rem;
            margin-top: 3rem;
        }
        .mobile-menu nav a {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            border-radius: 0.375rem;
            background-color: var(--card-bg);
            transition: background-color 0.2s;
            color: var(--text-color);
        }
        .mobile-menu nav a:hover {
            background-color: var(--primary-color);
            color: white;
        }
        .mobile-menu nav a svg {
            margin-right: 0.75rem;
            width: 1.5rem;
            height: 1.5rem;
        }
        @media (max-width: 768px) {
            .mobile-menu {
                width: 80%;
            }
            .header-actions {
                flex-direction: column;
                gap: 0.5rem;
                align-items: flex-end;
            }
        }

        /* Animation Classes */
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        @keyframes slideDown {
            from { 
                opacity: 0;
                transform: translateY(-20px);
            }
            to { 
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        @keyframes slideUp {
            from { 
                opacity: 0;
                transform: translateY(20px);
            }
            to { 
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        @keyframes slideInRight {
            from { 
                opacity: 0;
                transform: translateX(20px);
            }
            to { 
                opacity: 1;
                transform: translateX(0);
            }
        }
        
        @keyframes slideInLeft {
            from { 
                opacity: 0;
                transform: translateX(-20px);
            }
            to { 
                opacity: 1;
                transform: translateX(0);
            }
        }
        
        @keyframes bounce {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-5px); }
        }
        
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
        
        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
        
        /* Apply animations */
        .animate-fade-in {
            animation: fadeIn 0.5s ease-out forwards;
        }
        
        .animate-slide-down {
            animation: slideDown 0.5s ease-out forwards;
        }
        
        .animate-slide-up {
            animation: slideUp 0.5s ease-out forwards;
        }
        
        .animate-slide-right {
            animation: slideInRight 0.5s ease-out forwards;
        }
        
        .animate-slide-left {
            animation: slideInLeft 0.5s ease-out forwards;
        }
        
        /* Interactive elements */
        .interactive-card {
            transition: all 0.3s ease;
            cursor: pointer;
        }
        
        .interactive-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        }
        
        .interactive-button {
            transition: all 0.2s ease;
        }
        
        .interactive-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        
        .interactive-button:active {
            transform: translateY(1px);
        }
        
        /* Notification animations */
        .notification {
            animation: slideUp 0.3s ease-out forwards;
        }
        
        .notification-exit {
            animation: fadeIn 0.3s ease-out forwards;
        }
        
        /* Tab content transition */
        .tab-content {
            transition: opacity 0.3s ease, transform 0.3s ease;
        }
        
        .tab-content:not(.active) {
            display: none;
            opacity: 0;
            transform: translateX(10px);
        }
        
        .tab-content.active {
            display: block;
            opacity: 1;
            transform: translateX(0);
        }
        
        /* Loading spinner */
        .animate-spin {
            animation: spin 1s linear infinite;
        }
        
        /* Mobile menu animations */
        .mobile-menu {
            transition: transform 0.3s ease;
        }
        
        .mobile-menu.open {
            transform: translateX(0);
        }
        
        /* File preview modal */
        .modal-enter {
            animation: fadeIn 0.3s ease-out forwards;
        }
        
        /* Section animations with delays */
        .section-animation {
            opacity: 0;
            transform: translateY(20px);
            animation: slideUp 0.5s ease-out forwards;
        }
        
        .section-animation:nth-child(1) { animation-delay: 0.1s; }
        .section-animation:nth-child(2) { animation-delay: 0.2s; }
        .section-animation:nth-child(3) { animation-delay: 0.3s; }
        .section-animation:nth-child(4) { animation-delay: 0.4s; }
        .section-animation:nth-child(5) { animation-delay: 0.5s; }
        .section-animation:nth-child(6) { animation-delay: 0.6s; }
        
        /* Success animation */
        .animate-success {
            animation: bounce 0.5s ease, pulse 1s ease 0.5s;
        }
        
        /* Pagination styles */
        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 1rem;
        }
        
        .pagination a, .pagination span {
            padding: 0.5rem 1rem;
            margin: 0 0.25rem;
            border: 1px solid var(--border-color);
            border-radius: 0.25rem;
            text-decoration: none;
            color: var(--text-color);
            background-color: var(--card-bg);
            transition: all 0.2s ease;
        }
        
        .pagination a:hover {
            background-color: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }
        
        .pagination .current {
            background-color: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }
        
        .pagination .disabled {
            color: #6b7280;
            background-color: #f3f4f6;
            cursor: not-allowed;
        }
    </style>
</head>

<body class="<?php echo getBodyClass(); ?>" style="font-size: <?php echo getFontSize(); ?>;">
    <div class="max-w-6xl mx-auto px-4 py-2">
        <!-- Header -->
        <header class="flex flex-col sm:flex-row justify-between items-center py-4 border-b animate-slide-down" style="border-color: var(--border-color);">
            <div class="flex items-center gap-3">
                <!-- Hamburger Menu Button -->
                <button class="hamburger" id="hamburger">
                    <div class="line1"></div>
                    <div class="line2"></div>
                    <div class="line3"></div>
                </button>
                
                <img src="assets/images/yoonet-logo.jpg" alt="Yoonet Logo" class="h-10 w-auto">
                <div>
                    <h1 class="text-xl font-bold">Quest Dashboard</h1>
                    <span class="text-xs px-2 py-1 rounded-full <?php echo $role_badge_class; ?>">
                        <?php echo ucfirst(str_replace('_', ' ', $role)); ?>
                    </span>
                </div>
            </div>

            <div class="flex items-center gap-4 mt-3 sm:mt-0">
                <span class="hidden sm:block">Welcome, <?php echo htmlspecialchars($full_name); ?></span>
                <?php if ($is_giver): ?>
                    <a href="create_quest.php" class="bg-indigo-600 hover:bg-indigo-700 text-white px-4 py-2 rounded-lg text-sm font-medium flex items-center transition-colors interactive-button">
                        <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                        Create Quest
                    </a>
                <?php endif; ?>
            </div>
        </header>
        
        <!-- Mobile Menu -->
        <div class="mobile-menu" id="mobileMenu">
            <button class="close-menu" id="closeMenu">✕</button>
            <nav>
                <a href="landing.php" class="flex items-center">
                    <svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path></svg>
                    Home
                </a>
                <a href="leaderboard.php" class="flex items-center">
                    <svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16.5 18.75h-9m9 0a3 3 0 013 3h-15a3 3 0 013-3m9 0v-3.375c0-.621-.503-1.125-1.125-1.125h-.871M7.5 18.75v-3.375c0-.621.504-1.125 1.125-1.125h.872m5.007 0H9.497m5.007 0a7.454 7.454 0 01-.982-3.172M9.497 14.25a7.454 7.454 0 00.981-3.172M5.25 4.236c-.982.143-1.954.317-2.916.52A.75.75 0 003 5.48v10.018a.75.75 0 00.784.713 45.455 45.455 0 012.07-.352M19.5 4.236c.982.143 1.954.317 2.916.52A.75.75 0 0021 5.48v10.018a.75.75 0 00-.784.713 45.456 45.456 0 01-2.07-.352"></path></svg>
                    Leaderboard
                </a>
                <a href="settings.php" class="flex items-center">
                    <svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                    </svg>
                    Settings
                </a>
                <a href="logout.php" class="flex items-center">
                    <svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path></svg>
                    Logout
                </a>
            </nav>
        </div>
        <div id="backdrop" class="fixed inset-0 bg-black bg-opacity-50 z-900 hidden"></div>
        
        <!-- Main Content -->
        <main class="py-6">
            <!-- Display messages -->
            <?php if (isset($error) && $error): ?>
                <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4 notification" role="alert">
                    <span class="block sm:inline"><?php echo htmlspecialchars($error); ?></span>
                </div>
            <?php endif; ?>
            
            <?php if (isset($success) && $success): ?>
                <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4 notification" role="alert">
                    <span class="block sm:inline"><?php echo htmlspecialchars($success); ?></span>
                </div>
            <?php endif; ?>

            <!-- User Info Card -->
            <div class="bg-white rounded-lg shadow-sm p-4 mb-6 flex flex-wrap gap-4 items-center section-animation" style="background-color: var(--card-bg);">
                <div>
                    <h2 class="font-medium text-gray-500">Employee ID</h2>
                    <p class="font-semibold"><?php echo htmlspecialchars($employee_id); ?></p>
                </div>
                <div>
                    <h2 class="font-medium text-gray-500">Email</h2>
                    <p class="font-semibold"><?php echo htmlspecialchars($email); ?></p>
                </div>
                <div>
                    <h2 class="font-medium text-gray-500">Permissions</h2>
                    <p class="font-semibold">
                        <?php 
                        $permissions = [];
                        if ($is_giver) $permissions[] = "Create Quests";
                        if ($is_taker) $permissions[] = "Take Quests";
                        echo implode(", ", $permissions) ?: "Basic Access";
                        ?>
                    </p>
                </div>
            </div>

            <!-- Group Management Section (for takers) -->
            <?php if ($is_taker): ?>
                <div class="bg-white rounded-lg shadow-sm p-4 mb-6 section-animation" style="background-color: var(--card-bg);">
                    <div class="section-header flex items-center mb-4">
                        <svg class="role-icon text-indigo-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                        </svg>
                        <h2 class="text-lg font-bold">Group Management</h2>
                    </div>
                    
                    <?php if ($user_group): ?>
                        <!-- Current Group Info -->
                        <div class="mb-6">
                            <h3 class="font-medium mb-2">Your Group: <?php echo htmlspecialchars($user_group['group_name']); ?></h3>
                            <p class="text-sm text-gray-600 mb-3"><?php echo htmlspecialchars($user_group['description']); ?></p>
                            
                            <h4 class="font-medium mb-2">Group Members</h4>
                            <div class="space-y-2">
                                <?php foreach ($group_members as $member): ?>
                                    <div class="group-member interactive-card">
                                        <div class="group-member-avatar">
                                            <?php echo strtoupper(substr($member['full_name'], 0, 1)); ?>
                                        </div>
                                        <div>
                                            <p class="font-medium"><?php echo htmlspecialchars($member['full_name']); ?></p>
                                            <p class="text-xs text-gray-500">ID: <?php echo htmlspecialchars($member['employee_id']); ?></p>
                                        </div>
                                    </div>
                                <?php endforeach; ?>
                            </div>
                            
                            <form method="post" class="mt-4">
                                <input type="hidden" name="leave_group" value="1">
                                <button type="submit" class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded text-sm font-medium interactive-button">
                                    Leave Group
                                </button>
                            </form>
                        </div>
                    <?php else: ?>
                        <!-- Group Creation Form -->
                        <div class="mb-6">
                            <h3 class="font-medium mb-2">Create a New Group</h3>
                            <form method="post" class="space-y-3">
                                <div>
                                    <label for="group_name" class="block text-sm font-medium text-gray-700 mb-1">Group Name*</label>
                                    <input type="text" id="group_name" name="group_name" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                           placeholder="Enter group name" required>
                                </div>
                                <div>
                                    <label for="group_description" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                                    <textarea id="group_description" name="group_description" rows="2"
                                              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                              placeholder="Optional group description"></textarea>
                                </div>
                                <button type="submit" name="create_group" class="bg-indigo-500 hover:indigo-600 text-white px-4 py-2 rounded text-sm font-medium interactive-button">
                                    Create Group
                                </button>
                            </form>
                        </div>
                        
                        <!-- Available Groups to Join -->
                        <?php if (!empty($available_groups)): ?>
                            <div>
                                <h3 class="font-medium mb-2">Available Groups to Join</h3>
                                <div class="space-y-3">
                                    <?php foreach ($available_groups as $group): ?>
                                        <div class="border rounded p-3 interactive-card" style="border-color: var(--border-color);">
                                            <div class="flex justify-between">
                                                <h4 class="font-medium"><?php echo htmlspecialchars($group['group_name']); ?></h4>
                                                <span class="text-xs bg-gray-100 text-gray-800 px-2 py-1 rounded">
                                                    <?php echo $group['member_count']; ?> members
                                                </span>
                                            </div>
                                            <?php if (!empty($group['description'])): ?>
                                                <p class="text-sm text-gray-600 mt-1"><?php echo htmlspecialchars($group['description']); ?></p>
                                            <?php endif; ?>
                                            <form method="post" class="mt-2">
                                                <input type="hidden" name="group_id" value="<?php echo $group['id']; ?>">
                                                <input type="hidden" name="join_group" value="1">
                                                <button type="submit" class="w-full bg-green-500 hover:bg-green-600 text-white px-3 py-1 rounded text-sm interactive-button">
                                                    Join Group
                                                </button>
                                            </form>
                                        </div>
                                    <?php endforeach; ?>
                                </div>
                            </div>
                        <?php else: ?>
                            <p class="text-gray-500">No groups available to join at the moment.</p>
                        <?php endif; ?>
                    <?php endif; ?>
                </div>
            <?php endif; ?>

            <!-- Role-Based Content Grid -->
            <div class="grid gap-6 <?php echo ($is_giver && $is_taker) ? 'md:grid-cols-2' : 'grid-cols-1'; ?>">

                <!-- Quest Taker Section (if permitted) -->
                <?php if ($is_taker): ?>
                    <div class="bg-white rounded-lg shadow-sm p-4 taker-section section-animation" style="background-color: var(--card-bg);">
                        <div class="section-header flex items-center mb-4">
                            <svg class="role-icon text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
                            </svg>
                            <h2 class="text-lg font-bold">Quest Taker</h2>
                        </div>
                        
                        <!-- Available Quests -->
                        <div class="mb-6">
                            <h3 class="font-medium mb-3">Available Quests</h3>
                            <?php if (!empty($available_quests)): ?>
                                <div class="space-y-3">
                                    <?php foreach ($available_quests as $quest): ?>
                                        <div class="border rounded p-3 interactive-card" style="border-color: var(--border-color);">
                                            <div class="flex justify-between items-start">
                                                <div>
                                                    <h4 class="font-medium"><?php echo htmlspecialchars($quest['title']); ?></h4>
                                                    <p class="text-sm text-gray-600"><?php echo htmlspecialchars($quest['description']); ?></p>
                                                </div>
                                                <span class="xp-badge">+<?php echo $quest['xp']; ?> XP</span>
                                            </div>
                                            <div class="mt-2 flex justify-between items-center">
                                                <form method="post" name="accept_quest_form">
                                                    <input type="hidden" name="quest_id" value="<?php echo $quest['id']; ?>">
                                                    <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded text-sm interactive-button">
                                                        Accept Quest
                                                    </button>
                                                </form>
                                            </div>
                                        </div>
                                    <?php endforeach; ?>
                                </div>
                            <?php else: ?>
                                <p class="text-gray-500">No quests available at the moment.</p>
                            <?php endif; ?>
                        </div>
                        
                        <!-- Active Quests -->
                        <div class="mb-6">
                            <h3 class="font-medium mb-3">Your Active Quests</h3>
                            <?php if (!empty($active_quests)): ?>
                                <div class="space-y-3">
                                    <?php foreach ($active_quests as $quest): ?>
                                        <div class="border rounded p-3 interactive-card" style="border-color: var(--border-color);">
                                            <div class="flex justify-between items-start">
                                                <div>
                                                    <h4 class="font-medium"><?php echo htmlspecialchars($quest['title']); ?></h4>
                                                    <p class="text-sm text-gray-600"><?php echo htmlspecialchars($quest['description']); ?></p>
                                                </div>
                                                <span class="status-badge status-<?php echo $quest['user_status']; ?>">
                                                    <?php echo ucfirst(str_replace('_', ' ', $quest['user_status'])); ?>
                                                </span>
                                            </div>
                                            <div class="mt-2">
                                                <span class="xp-badge">+<?php echo $quest['xp']; ?> XP</span>
                                                
                                            </div>
                                            
                                            <?php if ($quest['user_status'] === 'in_progress'): ?>
                                                <div class="mt-3">
                                                    <h4 class="font-medium text-sm mb-1">Submit Quest</h4>
                                                    <form method="post" enctype="multipart/form-data">
                                                        <input type="hidden" name="quest_id" value="<?php echo $quest['id']; ?>">
                                                        
                                                        <div class="flex gap-2 mb-2">
                                                            <div class="flex items-center">
                                                                <input type="radio" id="file_<?php echo $quest['id']; ?>" name="submission_type" value="file" checked class="mr-1">
                                                                <label for="file_<?php echo $quest['id']; ?>" class="text-sm">Upload File</label>
                                                            </div>
                                                            <div class="flex items-center">
                                                                <input type="radio" id="link_<?php echo $quest['id']; ?>" name="submission_type" value="link" class="mr-1">
                                                                <label for="link_<?php echo $quest['id']; ?>" class="text-sm">Google Drive Link</label>
                                                            </div>
                                                        </div>
                                                        
                                                        <!-- File Upload -->
                                                        <div id="file-section_<?php echo $quest['id']; ?>">
                                                            <input type="file" name="quest_file" class="text-sm">
                                                            <p class="text-xs text-gray-500 mt-1">Allowed: PDF, DOC, JPG, PNG, TXT, ZIP (Max 5MB)</p>
                                                        </div>
                                                        
                                                        <!-- Drive Link -->
                                                        <div id="link-section_<?php echo $quest['id']; ?>" class="hidden mt-2">
                                                            <input type="text" name="drive_link" placeholder="https://drive.google.com/..." 
                                                                   class="w-full px-3 py-1 border border-gray-300 rounded text-sm">
                                                        </div>
                                                        
                                                        <button type="submit" name="submit_quest" class="mt-2 bg-green-500 hover:bg-green-600 text-white px-3 py-1 rounded text-sm interactive-button">
                                                            Submit Quest
                                                        </button>
                                                    </form>
                                                </div>
                                            <?php endif; ?>
                                        </div>
                                    <?php endforeach; ?>
                                </div>
                            <?php else: ?>
                                <p class="text-gray-500">You don't have any active quests.</p>
                            <?php endif; ?>
                        </div>
                        
                        <!-- Submission History -->
                        <div>
                            <h3 class="font-medium mb-3">Submission History</h3>
                            <?php if (!empty($submissions)): ?>
                                <div class="space-y-3">
                                    <?php foreach ($submissions as $submission): ?>
                                        <div class="border rounded p-3 interactive-card" style="border-color: var(--border-color);">
                                            <div class="flex justify-between items-start">
                                                <div>
                                                    <h4 class="font-medium"><?php echo htmlspecialchars($submission['quest_title']); ?></h4>
                                                    <p class="text-sm text-gray-600">
                                                        Submitted: <?php echo date('M d, Y H:i', strtotime($submission['submitted_at'])); ?>
                                                    </p>
                                                </div>
                                                <span class="status-badge status-<?php echo $submission['submission_status']; ?>">
                                                    <?php echo ucfirst($submission['submission_status']); ?>
                                                </span>
                                            </div>
                                            
                                            <?php if ($submission['submission_type'] === 'file'): ?>
                                                <div class="mt-2">
                                                    <p class="text-sm">File: 
                                                        <a href="<?php echo htmlspecialchars($submission['file_path']); ?>" 
                                                           target="_blank" class="text-blue-500 hover:underline">
                                                            <?php echo basename($submission['file_path']); ?>
                                                        </a>
                                                        <button class="view-file ml-2 text-sm text-blue-500 hover:underline"
                                                                data-file="<?php echo htmlspecialchars($submission['file_path']); ?>">
                                                            Preview
                                                        </button>
                                                    </p>
                                                </div>
                                            <?php else: ?>
                                                <div class="mt-2">
                                                    <p class="text-sm">Drive Link: 
                                                        <a href="<?php echo htmlspecialchars($submission['drive_link']); ?>" 
                                                           target="_blank" class="text-blue-500 hover:underline">
                                                            View Submission
                                                        </a>
                                                    </p>
                                                </div>
                                            <?php endif; ?>
                                            
                                            <?php if ($submission['submission_status'] === 'approved' || $submission['submission_status'] === 'rejected'): ?>
                                                <div class="mt-2 p-2 bg-gray-50 rounded">
                                                    <p class="text-sm font-medium">Reviewer: <?php echo htmlspecialchars($submission['reviewer_name'] ?? 'Admin'); ?></p>
                                                    <p class="text-sm">
                                                        <span class="font-medium">Feedback:</span> 
                                                        <?php echo htmlspecialchars($submission['feedback'] ?? 'No feedback provided'); ?>
                                                    </p>
                                                    <p class="text-sm mt-1">
                                                        <span class="font-medium">XP Earned:</span> 
                                                        <?php echo $submission['quest_xp'] + ($submission['additional_xp'] ?? 0); ?> 
                                                        (Base: <?php echo $submission['quest_xp']; ?> + Bonus: <?php echo $submission['additional_xp'] ?? 0; ?>)
                                                    </p>
                                                </div>
                                            <?php endif; ?>
                                        </div>
                                    <?php endforeach; ?>
                                </div>
                                
                                <!-- Pagination for submissions -->
                                <?php if ($total_submissions > $items_per_page): ?>
                                    <div class="mt-4">
                                        <?php echo generatePagination($total_pages, $current_page); ?>
                                    </div>
                                <?php endif; ?>
                            <?php else: ?>
                                <p class="text-gray-500">No submission history.</p>
                            <?php endif; ?>
                        </div>
                    </div>
                <?php endif; ?>

                
                <!-- Quest Giver Section (if permitted) -->
                <?php if ($is_giver): ?>
                    <div class="bg-white rounded-lg shadow-sm p-4 giver-section section-animation" style="background-color: var(--card-bg);">
                        <div class="section-header flex items-center mb-4">
                            <svg class="role-icon text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                            </svg>
                            <h2 class="text-lg font-bold">Quest Giver</h2>
                        </div>
                        
                        <!-- Pending Submissions -->
                        <div class="mb-6">
                            <h3 class="font-medium mb-3">Pending Submissions</h3>
                            <?php if (!empty($pending_submissions)): ?>
                                <div class="space-y-3">
                                    <?php foreach ($pending_submissions as $submission): ?>
                                        <div class="border rounded p-3 interactive-card" style="border-color: var(--border-color);">
                                            <div class="flex justify-between items-start">
                                                <div>
                                                    <h4 class="font-medium"><?php echo htmlspecialchars($submission['quest_title']); ?></h4>
                                                    <p class="text-sm">
                                                        <span class="font-medium">Submitted by:</span> 
                                                        <?php echo htmlspecialchars($submission['employee_name']); ?>
                                                    </p>
                                                    <p class="text-sm text-gray-600">
                                                        Submitted: <?php echo date('M d, Y H:i', strtotime($submission['submitted_at'])); ?>
                                                    </p>
                                                </div>
                                                <span class="status-badge status-pending">Pending</span>
                                            </div>
                                            
                                            <?php if ($submission['submission_type'] === 'file'): ?>
                                                <div class="mt-2">
                                                    <p class="text-sm">File: 
                                                        <a href="<?php echo htmlspecialchars($submission['file_path']); ?>" 
                                                           target="_blank" class="text-blue-500 hover:underline">
                                                            <?php echo basename($submission['file_path']); ?>
                                                        </a>
                                                        <button class="view-file ml-2 text-sm text-blue-500 hover:underline"
                                                                data-file="<?php echo htmlspecialchars($submission['file_path']); ?>">
                                                            Preview
                                                        </button>
                                                    </p>
                                                </div>
                                            <?php else: ?>
                                                <div class="mt-2">
                                                    <p class="text-sm">Drive Link: 
                                                        <a href="<?php echo htmlspecialchars($submission['drive_link']); ?>" 
                                                           target="_blank" class="text-blue-500 hover:underline">
                                                            View Submission
                                                        </a>
                                                    </p>
                                                </div>
                                            <?php endif; ?>
                                            
                                            <div class="mt-3">
                                                <h4 class="font-medium text-sm mb-1">Quest Details</h4>
                                                <p class="text-sm"><?php echo htmlspecialchars($submission['quest_description']); ?></p>
                                                <p class="text-sm mt-1">
                                                    <span class="font-medium">XP Reward:</span> 
                                                    <?php echo $submission['base_xp']; ?> XP
                                                </p>
                                            </div>
                                            
                                            <form method="post" class="mt-3">
                                                <input type="hidden" name="submission_id" value="<?php echo $submission['id']; ?>">
                                                <input type="hidden" name="review_submission" value="1">
                                                
                                                <div class="mb-2">
                                                    <label for="feedback_<?php echo $submission['id']; ?>" class="block text-sm font-medium mb-1">Feedback</label>
                                                    <textarea id="feedback_<?php echo $submission['id']; ?>" name="feedback" rows="2"
                                                              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                                              placeholder="Provide feedback for the submission"></textarea>
                                                </div>
                                                
                                                <div class="mb-2">
                                                    <label for="additional_xp_<?php echo $submission['id']; ?>" class="block text-sm font-medium mb-1">Bonus XP (Optional)</label>
                                                    <input type="number" id="additional_xp_<?php echo $submission['id']; ?>" name="additional_xp" min="0" max="20" 
                                                           class="w-20 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                                                           value="0">
                                                </div>
                                                
                                                <div class="flex gap-2">
                                                    <button type="submit" name="action" value="approve" 
                                                            class="bg-green-500 hover:bg-green-600 text-white px-3 py-1 rounded text-sm interactive-button">
                                                        Approve (+<?php echo $submission['base_xp']; ?> XP)
                                                    </button>
                                                    <button type="submit" name="action" value="reject" 
                                                            class="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-sm interactive-button">
                                                        Reject
                                                    </button>
                                                </div>
                                            </form>
                                        </div>
                                    <?php endforeach; ?>
                                </div>
                                
                                <!-- Pagination for pending submissions -->
                                <?php if ($total_pending > $items_per_page): ?>
                                    <div class="mt-4">
                                        <?php echo generatePagination($total_pages_pending, $current_page); ?>
                                    </div>
                                <?php endif; ?>
                            <?php else: ?>
                                <p class="text-gray-500">No pending submissions to review.</p>
                            <?php endif; ?>
                        </div>
                        
                        <!-- Your Created Quests -->
                        <div class="mb-6">
                            <div class="flex justify-between items-center mb-3">
                                <h3 class="font-medium">Your Created Quests</h3>
                                <a href="create_quest.php" class="bg-indigo-500 hover:bg-indigo-600 text-white px-3 py-1 rounded text-sm interactive-button">
                                    + Create New Quest
                                </a>
                            </div>
                            
                            <?php if (!empty($all_quests)): ?>
                                <div class="space-y-3">
                                    <?php foreach ($all_quests as $quest): ?>
                                        <div class="border rounded p-3 interactive-card" style="border-color: var(--border-color);">
                                            <div class="flex justify-between items-start">
                                                <div>
                                                    <h4 class="font-medium"><?php echo htmlspecialchars($quest['title']); ?></h4>
                                                    <p class="text-sm text-gray-600"><?php echo htmlspecialchars($quest['description']); ?></p>
                                                </div>
                                                <span class="status-badge status-<?php echo $quest['status']; ?>">
                                                    <?php echo ucfirst($quest['status']); ?>
                                                </span>
                                            </div>
                                            <div class="mt-2 flex justify-between items-center">
                                                <span class="xp-badge">+<?php echo $quest['xp']; ?> XP</span>
                                                <span class="text-xs bg-gray-100 text-gray-800 px-2 py-1 rounded">
                                                    <?php echo $quest['assigned_count']; ?> submissions
                                                </span>
                                            </div>
                                            
                                            <!-- Quest Management Buttons -->
                                            <div class="mt-3 flex gap-2">
                                                <a href="edit_quest.php?id=<?php echo $quest['id']; ?>" 
                                                   class="bg-yellow-500 hover:bg-yellow-600 text-white px-3 py-1 rounded text-sm interactive-button">
                                                    Edit
                                                </a>
                                               <button type="button" onclick="showDeleteModal(<?php echo $quest['id']; ?>)" class="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-sm interactive-button">
                                                Delete
                                                </button>
                                                <a href="view_submissions.php?quest_id=<?php echo $quest['id']; ?>" 
                                                   class="bg-blue-500 hover:bg-blue-600 text-white px-3 py-1 rounded text-sm interactive-button">
                                                    View Submissions
                                                </a>
                                            </div>
                                            
                                            <!-- Quick Stats -->
                                            <div class="mt-3 grid grid-cols-3 gap-2 text-center text-xs">
                                                <div class="bg-green-100 text-green-800 p-1 rounded">
                                                    <div class="font-medium"><?php echo $quest['approved_count'] ?? 0; ?></div>
                                                    <div>Approved</div>
                                                </div>
                                                <div class="bg-yellow-100 text-yellow-800 p-1 rounded">
                                                    <div class="font-medium"><?php echo $quest['pending_count'] ?? 0; ?></div>
                                                    <div>Pending</div>
                                                </div>
                                                <div class="bg-red-100 text-red-800 p-1 rounded">
                                                    <div class="font-medium"><?php echo $quest['rejected_count'] ?? 0; ?></div>
                                                    <div>Rejected</div>
                                                </div>
                                            </div>
                                        </div>
                                    <?php endforeach; ?>
                                </div>
                                
                                <!-- Pagination for quests -->
                                <?php if ($total_quests > $items_per_page): ?>
                                    <div class="mt-4">
                                        <?php echo generatePagination($total_pages_quests, $current_page); ?>
                                    </div>
                                <?php endif; ?>
                            <?php else: ?>
                                <p class="text-gray-500">You haven't created any quests yet.</p>
                            <?php endif; ?>
                        </div>
                        
                        <!-- Recent Submissions -->
                        <div>
                            <h3 class="font-medium mb-3">Recent Submissions</h3>
                            <?php if (!empty($all_submissions)): ?>
                                <div class="space-y-3">
                                    <?php foreach ($all_submissions as $submission): ?>
                                        <div class="border rounded p-3 interactive-card" style="border-color: var(--border-color);">
                                            <div class="flex justify-between items-start">
                                                <div>
                                                    <h4 class="font-medium"><?php echo htmlspecialchars($submission['quest_title']); ?></h4>
                                                    <p class="text-sm">
                                                        <span class="font-medium">Employee:</span> 
                                                        <?php echo htmlspecialchars($submission['employee_name']); ?>
                                                    </p>
                                                    <p class="text-sm text-gray-600">
                                                        Submitted: <?php echo date('M d, Y H:i', strtotime($submission['submitted_at'])); ?>
                                                    </p>
                                                </div>
                                                <span class="status-badge status-<?php echo $submission['status']; ?>">
                                                    <?php echo ucfirst($submission['status']); ?>
                                                </span>
                                            </div>
                                            
                                            <?php if ($submission['submission_type'] === 'file'): ?>
                                                <div class="mt-2">
                                                    <p class="text-sm">File: 
                                                        <a href="<?php echo htmlspecialchars($submission['file_path']); ?>" 
                                                           target="_blank" class="text-blue-500 hover:underline">
                                                            <?php echo basename($submission['file_path']); ?>
                                                        </a>
                                                        <button class="view-file ml-2 text-sm text-blue-500 hover:underline"
                                                                data-file="<?php echo htmlspecialchars($submission['file_path']); ?>">
                                                            Preview
                                                        </button>
                                                    </p>
                                                </div>
                                            <?php else: ?>
                                                <div class="mt-2">
                                                    <p class="text-sm">Drive Link: 
                                                        <a href="<?php echo htmlspecialchars($submission['drive_link']); ?>" 
                                                           target="_blank" class="text-blue-500 hover:underline">
                                                            View Submission
                                                        </a>
                                                    </p>
                                                </div>
                                            <?php endif; ?>
                                            
                                            <?php if ($submission['status'] === 'approved' || $submission['status'] === 'rejected'): ?>
                                                <div class="mt-2 p-2 bg-gray-50 rounded">
                                                    <p class="text-sm font-medium">Reviewed by: <?php echo htmlspecialchars($submission['reviewer_name'] ?? 'You'); ?></p>
                                                    <p class="text-sm">
                                                        <span class="font-medium">Feedback:</span> 
                                                        <?php echo htmlspecialchars($submission['feedback'] ?? 'No feedback provided'); ?>
                                                    </p>
                                                    <p class="text-sm mt-1">
                                                        <span class="font-medium">XP Awarded:</span> 
                                                        <?php echo $submission['base_xp'] + ($submission['additional_xp'] ?? 0); ?> 
                                                        (Base: <?php echo $submission['base_xp']; ?> + Bonus: <?php echo $submission['additional_xp'] ?? 0; ?>)
                                                    </p>
                                                </div>
                                            <?php endif; ?>
                                        </div>
                                    <?php endforeach; ?>
                                </div>
                                
                                <!-- Pagination for all submissions -->
                                <?php if ($total_all_submissions > $items_per_page): ?>
                                    <div class="mt-4">
                                        <?php echo generatePagination($total_pages_all_submissions, $current_page); ?>
                                    </div>
                                <?php endif; ?>
                                
                                <div class="mt-3 text-center">
                                    <a href="view_all_submissions.php" class="text-blue-500 hover:underline text-sm">
                                        View All Submissions →
                                    </a>
                                </div>
                            <?php else: ?>
                                <p class="text-gray-500">No submissions yet.</p>
                            <?php endif; ?>
                        </div>
                    </div>
                <?php endif; ?>
            </div>
            
            <!-- User Stats -->
            <div class="bg-white rounded-lg shadow-sm p-4 mt-6 section-animation" style="background-color: var(--card-bg);">
                <h2 class="text-lg font-bold mb-4">Your Stats</h2>
                <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                    <div class="border rounded p-3 text-center interactive-card" style="border-color: var(--border-color);">
                        <h3 class="text-sm font-medium text-gray-500">Level</h3>
                        <p class="text-3xl font-bold"><?php echo $level; ?></p>
                        <p class="text-xs text-gray-500"><?php echo $rank; ?></p>
                    </div>
                    <div class="border rounded p-3 text-center interactive-card" style="border-color: var(--border-color);">
                        <h3 class="text-sm font-medium text-gray-500">Total XP</h3>
                        <p class="text-3xl font-bold"><?php echo $stats['total_xp'] ?? 0; ?></p>
                        <p class="text-xs text-gray-500"><?php echo ($stats['total_xp'] ?? 0) % 50; ?>/50 to next level</p>
                    </div>
                    <?php if ($is_taker): ?>
                        <div class="border rounded p-3 text-center interactive-card" style="border-color: var(--border-color);">
                            <h3 class="text-sm font-medium text-gray-500">Quests Completed</h3>
                            <p class="text-3xl font-bold"><?php echo $stats['completed_quests'] ?? 0; ?></p>
                            <p class="text-xs text-gray-500"><?php echo count($active_quests); ?> in progress</p>
                        </div>
                    <?php endif; ?>
                    <?php if ($is_giver): ?>
                        <div class="border rounded p-3 text-center interactive-card" style="border-color: var(--border-color);">
                            <h3 class="text-sm font-medium text-gray-500">Quests Created</h3>
                            <p class="text-3xl font-bold"><?php echo $stats['created_quests'] ?? 0; ?></p>
                            <p class="text-xs text-gray-500"><?php echo $stats['reviewed_submissions'] ?? 0; ?> reviewed</p>
                        </div>
                    <?php endif; ?>
                </div>
            </div>
        </main>
    </div>

    <!-- File Preview Modal -->
    <div id="fileModal" class="fixed inset-0 z-50 hidden overflow-auto bg-black bg-opacity-50">
        <div class="relative w-full max-w-4xl mx-auto my-8 bg-white rounded-lg shadow-xl" style="background-color: var(--card-bg);">
            <div class="flex justify-between items-center p-4 border-b" style="border-color: var(--border-color);">
                <h3 class="text-lg font-semibold">File Preview</h3>
                <button id="closeModal" class="text-gray-500 hover:text-gray-700">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            <div class="p-4">
                <div id="filePreviewContent" class="flex justify-center items-center min-h-[400px]">
                    <p>Loading preview...</p>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Delete Confirmation Modal -->
    <div id="deleteModal" class="fixed inset-0 z-50 hidden overflow-auto bg-black bg-opacity-50">
        <div class="relative w-full max-w-md mx-auto my-8 bg-white rounded-lg shadow-xl" style="background-color: var(--card-bg);">
            <div class="flex justify-between items-center p-4 border-b" style="border-color: var(--border-color);">
                <h3 class="text-lg font-semibold">Confirm Deletion</h3>
                <button id="closeDeleteModal" class="text-gray-500 hover:text-gray-700">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
            <div class="p-4">
                <p class="mb-4">Are you sure you want to delete this quest? This action cannot be undone.</p>
                <div class="flex justify-end gap-3">
                    <button id="cancelDelete" class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        Cancel
                    </button>
                    <form id="deleteForm" method="post" class="inline">
                        <input type="hidden" name="quest_id" id="deleteQuestId" value="">
                        <button type="submit" name="delete_quest" class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                            Delete Quest
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.11.338/pdf.min.js"></script>
    <script>
        // Set PDF.js worker path
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.11.338/pdf.worker.min.js';

        // Mobile menu toggle
        const hamburger = document.getElementById('hamburger');
        const mobileMenu = document.getElementById('mobileMenu');
        const backdrop = document.getElementById('backdrop');
        const closeMenu = document.getElementById('closeMenu');

        hamburger.addEventListener('click', () => {
            mobileMenu.classList.add('open');
            backdrop.style.display = 'block';
            document.body.style.overflow = 'hidden';
        });

        closeMenu.addEventListener('click', () => {
            mobileMenu.classList.remove('open');
            backdrop.style.display = 'none';
            document.body.style.overflow = '';
        });

        backdrop.addEventListener('click', () => {
            mobileMenu.classList.remove('open');
            backdrop.style.display = 'none';
            document.body.style.overflow = '';
        });

        // File preview modal
        const fileModal = document.getElementById('fileModal');
        const closeModal = document.getElementById('closeModal');
        const filePreviewContent = document.getElementById('filePreviewContent');
        const viewFileButtons = document.querySelectorAll('.view-file');

        closeModal.addEventListener('click', () => {
            fileModal.classList.add('hidden');
        });

        viewFileButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                const filePath = e.target.getAttribute('data-file');
                const fileExt = filePath.split('.').pop().toLowerCase();
                
                filePreviewContent.innerHTML = '<p>Loading preview...</p>';
                fileModal.classList.remove('hidden');
                
                // Display based on file type
                if (['jpg', 'jpeg', 'png', 'gif'].includes(fileExt)) {
                    filePreviewContent.innerHTML = `<img src="${filePath}" alt="Preview" class="max-w-full max-h-[80vh]">`;
                } else if (fileExt === 'pdf') {
                    // Load PDF using PDF.js
                    pdfjsLib.getDocument(filePath).promise.then(pdf => {
                        pdf.getPage(1).then(page => {
                            const viewport = page.getViewport({ scale: 1.0 });
                            const canvas = document.createElement('canvas');
                            const context = canvas.getContext('2d');
                            canvas.height = viewport.height;
                            canvas.width = viewport.width;
                            
                            filePreviewContent.innerHTML = '';
                            filePreviewContent.appendChild(canvas);
                            
                            page.render({
                                canvasContext: context,
                                viewport: viewport
                            });
                        });
                    }).catch(err => {
                        filePreviewContent.innerHTML = `<p>Could not load PDF preview. <a href="${filePath}" target="_blank" class="text-blue-500">Download file</a></p>`;
                    });
                } else if (['doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx'].includes(fileExt)) {
                    filePreviewContent.innerHTML = `<p>Office files can't be previewed. <a href="${filePath}" target="_blank" class="text-blue-500">Download file</a></p>`;
                } else if (fileExt === 'txt') {
                    fetch(filePath)
                        .then(response => response.text())
                        .then(text => {
                            filePreviewContent.innerHTML = `<pre class="whitespace-pre-wrap bg-gray-100 p-4 rounded">${text}</pre>`;
                        })
                        .catch(() => {
                            filePreviewContent.innerHTML = `<p>Could not load text file. <a href="${filePath}" target="_blank" class="text-blue-500">Download file</a></p>`;
                        });
                } else {
                    filePreviewContent.innerHTML = `<p>No preview available. <a href="${filePath}" target="_blank" class="text-blue-500">Download file</a></p>`;
                }
            });
        });

        // Toggle between file and link submission
        document.querySelectorAll('input[type="radio"][name="submission_type"]').forEach(radio => {
            radio.addEventListener('change', function() {
                const questId = this.id.split('_')[1];
                const fileSection = document.getElementById(`file-section_${questId}`);
                const linkSection = document.getElementById(`link-section_${questId}`);
                
                if (this.value === 'file') {
                    fileSection.classList.remove('hidden');
                    linkSection.classList.add('hidden');
                } else {
                    fileSection.classList.add('hidden');
                    linkSection.classList.remove('hidden');
                }
            });
        });

        // Theme settings form submission
        document.getElementById('themeSettingsForm')?.addEventListener('submit', function(e) {
            e.preventDefault();
            const formData = new FormData(this);
            
            fetch('dashboard.php', {
                method: 'POST',
                body: formData
            }).then(response => {
                if (response.ok) {
                    window.location.reload();
                }
            });
        });

        // Animation for theme change
        document.body.addEventListener('click', function(e) {
            if (e.target.matches('[data-theme]') || e.target.closest('[data-theme]')) {
                document.body.classList.add('theme-change');
                setTimeout(() => {
                    document.body.classList.remove('theme-change');
                }, 400);
            }
        });

        // Handle quest acceptance
        document.querySelectorAll('form[name="accept_quest_form"]').forEach(form => {
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                const formData = new FormData(this);
                
                fetch('accept_quest.php', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Show success message and reload the page
                        alert('Quest accepted successfully!');
                        window.location.reload();
                    } else {
                        alert(data.error || 'Error accepting quest');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while accepting the quest');
                });
            });
        });
         // Delete Confirmation Modal
        const deleteModal = document.getElementById('deleteModal');
        const closeDeleteModal = document.getElementById('closeDeleteModal');
        const cancelDelete = document.getElementById('cancelDelete');
        const deleteForm = document.getElementById('deleteForm');
        const deleteQuestId = document.getElementById('deleteQuestId');

        function showDeleteModal(questId) {
            deleteQuestId.value = questId;
            deleteModal.classList.remove('hidden');
            document.body.style.overflow = 'hidden';
        }

        function hideDeleteModal() {
            deleteModal.classList.add('hidden');
            document.body.style.overflow = '';
        }

        closeDeleteModal.addEventListener('click', hideDeleteModal);
        cancelDelete.addEventListener('click', hideDeleteModal);

        // Close modal when clicking outside
        deleteModal.addEventListener('click', (e) => {
            if (e.target === deleteModal) {
                hideDeleteModal();
            }
        });

        // Handle form submission
        deleteForm.addEventListener('submit', function(e) {
            // The form will submit normally since it's a POST form
            hideDeleteModal();
            
        });
    </script>
</body>
</html>

delete_quest.php:
<?php
require_once 'includes/config.php';
require_once 'includes/functions.php';

// Start session
session_start();

// Check if user is logged in and has quest giver permissions
if (!is_logged_in() || !in_array($_SESSION['role'], ['quest_giver', 'hybrid'])) {
    header('Location: login.php');
    exit();
}

if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['quest_id'])) {
    $quest_id = $_POST['quest_id'];
    $employee_id = $_SESSION['employee_id'];
    
    try {
        // Verify the quest belongs to the current user before deleting
        $stmt = $pdo->prepare("SELECT id FROM quests WHERE id = ? AND created_by = (SELECT id FROM users WHERE employee_id = ?)");
        $stmt->execute([$quest_id, $employee_id]);
        
        if ($stmt->fetch()) {
            // Delete the quest
            $stmt = $pdo->prepare("DELETE FROM quests WHERE id = ?");
            $stmt->execute([$quest_id]);
            
            $_SESSION['success'] = "Quest deleted successfully!";
        } else {
            $_SESSION['error'] = "You can only delete quests you created.";
        }
    } catch (PDOException $e) {
        error_log("Error deleting quest: " . $e->getMessage());
        $_SESSION['error'] = "Error deleting quest";
    }
    
    header('Location: dashboard.php');
    exit();
}

edit_quest.php:
<?php
require_once 'includes/config.php';
require_once 'includes/functions.php';

if (!is_logged_in()) {
    header('Location: login.php');
    exit();
}

$role = $_SESSION['role'] ?? '';
if (!in_array($role, ['quest_giver', 'hybrid'])) {
    header('Location: dashboard.php');
    exit();
}

$error = '';
$success = '';
$quest = null;
$quest_id = $_GET['id'] ?? 0;

// Fetch quest data with new fields
try {
    $stmt = $pdo->prepare("SELECT *, UNIX_TIMESTAMP(due_date) AS due_timestamp FROM quests WHERE id = ?");
    $stmt->execute([$quest_id]);
    $quest = $stmt->fetch();
    
    if (!$quest) {
        header('Location: dashboard.php');
        exit();
    }
} catch (PDOException $e) {
    error_log("Database error fetching quest: " . $e->getMessage());
    $error = 'Error loading quest data';
}

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $title = trim($_POST['title'] ?? '');
    $description = trim($_POST['description'] ?? '');
    $xp = intval($_POST['xp'] ?? 0);
    $status = $_POST['status'] ?? 'active';
    $due_date = $_POST['due_date'] ?? null;
    $category = trim($_POST['category'] ?? '');
    $visibility = $_POST['visibility'] ?? 'public';
    $remove_file = isset($_POST['remove_file']);

    // Validate input
    if (empty($title)) {
        $error = 'Title is required';
    } elseif (empty($description)) {
        $error = 'Description is required';
    } elseif ($xp < 1 || $xp > 100) {
        $error = 'XP must be between 1 and 100';
    } else {
        // Process file upload
        $file_path = $quest['file_path'] ?? null;
        $file_uploaded = false;
        
        // Handle file removal
        if ($remove_file && $file_path) {
            if (file_exists($file_path)) {
                unlink($file_path);
            }
            $file_path = null;
        }
        
        // Handle new file upload
        if (isset($_FILES['attachment']) && $_FILES['attachment']['error'] === UPLOAD_ERR_OK) {
            $uploadDir = 'uploads/quests/';
            if (!is_dir($uploadDir)) {
                mkdir($uploadDir, 0777, true);
            }
            
            $filename = uniqid() . '_' . basename($_FILES['attachment']['name']);
            $targetPath = $uploadDir . $filename;
            
            // Validate file type and size
            $allowedTypes = ['image/jpeg', 'image/png', 'application/pdf', 'application/msword', 
                             'application/vnd.openxmlformats-officedocument.wordprocessingml.document'];
            $maxSize = 10 * 1024 * 1024; // 10MB
            
            if ($_FILES['attachment']['size'] > $maxSize) {
                $error = 'File size exceeds maximum limit of 10MB';
            } elseif (!in_array($_FILES['attachment']['type'], $allowedTypes)) {
                $error = 'Invalid file type. Allowed: JPG, PNG, PDF, DOC, DOCX';
            } elseif (move_uploaded_file($_FILES['attachment']['tmp_name'], $targetPath)) {
                // Remove old file if exists
                if ($file_path && file_exists($file_path)) {
                    unlink($file_path);
                }
                $file_path = $targetPath;
                $file_uploaded = true;
            } else {
                $error = 'Failed to upload file';
            }
        }
        
        // Format due date for database
        $due_date_formatted = null;
        if ($due_date) {
            $due_date_formatted = date('Y-m-d H:i:s', strtotime($due_date));
        }

        if (empty($error)) {
            try {
                $stmt = $pdo->prepare("UPDATE quests SET 
                    title = ?, 
                    description = ?, 
                    xp = ?, 
                    status = ?, 
                    due_date = ?, 
                    category = ?, 
                    visibility = ?, 
                    file_path = ? 
                    WHERE id = ?");
                    
                $stmt->execute([
                    $title, 
                    $description, 
                    $xp, 
                    $status, 
                    $due_date_formatted, 
                    $category, 
                    $visibility, 
                    $file_path, 
                    $quest_id
                ]);
                
                $success = 'Quest updated successfully!';
                
                // Update local quest data
                $quest['title'] = $title;
                $quest['description'] = $description;
                $quest['xp'] = $xp;
                $quest['status'] = $status;
                $quest['due_date'] = $due_date_formatted;
                $quest['category'] = $category;
                $quest['visibility'] = $visibility;
                $quest['file_path'] = $file_path;
                
            } catch (PDOException $e) {
                // Clean up if file was uploaded but DB update failed
                if ($file_uploaded && $file_path && file_exists($file_path)) {
                    unlink($file_path);
                }
                error_log("Database error updating quest: " . $e->getMessage());
                $error = 'Error updating quest';
            }
        }
    }
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Quest</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
</head>
<body class="bg-gray-50">
    <div class="max-w-4xl mx-auto px-4 py-8">
        <div class="flex justify-between items-center mb-6">
            <h1 class="text-2xl font-bold">Edit Quest</h1>
            <a href="dashboard.php" class="bg-gray-200 hover:bg-gray-300 px-4 py-2 rounded">
                <i class="fas fa-arrow-left mr-2"></i>Back to Dashboard
            </a>
        </div>

        <?php if ($error): ?>
            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
                <?php echo htmlspecialchars($error); ?>
            </div>
        <?php endif; ?>

        <?php if ($success): ?>
            <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
                <?php echo htmlspecialchars($success); ?>
            </div>
        <?php endif; ?>

        <form method="post" enctype="multipart/form-data" class="bg-white rounded-lg shadow-sm p-6">
            <div class="mb-4">
                <label for="title" class="block text-sm font-medium text-gray-700 mb-1">Quest Title</label>
                <input type="text" id="title" name="title" value="<?php echo htmlspecialchars($quest['title'] ?? ''); ?>" 
                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                       required>
            </div>

            <div class="mb-4">
                <label for="description" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                <textarea id="description" name="description" rows="4"
                          class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                          required><?php echo htmlspecialchars($quest['description'] ?? ''); ?></textarea>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                <div>
                    <label for="due_date" class="block text-sm font-medium text-gray-700 mb-1">Due Date</label>
                    <input type="datetime-local" id="due_date" name="due_date" 
                           value="<?php 
                                if ($quest['due_timestamp']) {
                                    echo date('Y-m-d\TH:i', $quest['due_timestamp']);
                                } else {
                                    echo date('Y-m-d\TH:i', strtotime('+1 week'));
                                }
                           ?>"
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                </div>
                
                <div>
                    <label for="category" class="block text-sm font-medium text-gray-700 mb-1">Category</label>
                    <input type="text" id="category" name="category" 
                           value="<?php echo htmlspecialchars($quest['category'] ?? ''); ?>"
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
                           placeholder="e.g., Programming, Design">
                </div>
            </div>

            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                <div>
                    <label for="xp" class="block text-sm font-medium text-gray-700 mb-1">XP Reward (1-100)</label>
                    <input type="number" id="xp" name="xp" min="1" max="100" 
                           value="<?php echo htmlspecialchars($quest['xp'] ?? 10); ?>"
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                </div>
                
                <div>
                    <label for="status" class="block text-sm font-medium text-gray-700 mb-1">Status</label>
                    <select id="status" name="status" 
                            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                        <option value="active" <?php echo ($quest['status'] ?? '') === 'active' ? 'selected' : ''; ?>>Active</option>
                        <option value="archived" <?php echo ($quest['status'] ?? '') === 'archived' ? 'selected' : ''; ?>>Archived</option>
                    </select>
                </div>
                
                <div>
                    <label for="visibility" class="block text-sm font-medium text-gray-700 mb-1">Visibility</label>
                    <select id="visibility" name="visibility" 
                            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500">
                        <option value="public" <?php echo ($quest['visibility'] ?? 'public') === 'public' ? 'selected' : ''; ?>>Public</option>
                        <option value="private" <?php echo ($quest['visibility'] ?? 'public') === 'private' ? 'selected' : ''; ?>>Private</option>
                        <option value="unlisted" <?php echo ($quest['visibility'] ?? 'public') === 'unlisted' ? 'selected' : ''; ?>>Unlisted</option>
                    </select>
                </div>
            </div>

            <div class="mb-4">
                <label class="block text-sm font-medium text-gray-700 mb-1">Attachment</label>
                
                <?php if (!empty($quest['file_path'])): ?>
                    <div class="flex items-center justify-between bg-gray-50 p-3 rounded mb-2">
                        <div class="flex items-center">
                            <i class="fas fa-paperclip text-gray-500 mr-2"></i>
                            <a href="<?php echo htmlspecialchars($quest['file_path']); ?>" 
                               target="_blank" 
                               class="text-blue-600 hover:underline">
                                <?php echo basename($quest['file_path']); ?>
                            </a>
                        </div>
                        <label class="flex items-center text-sm text-gray-500 cursor-pointer">
                            <input type="checkbox" name="remove_file" value="1" class="mr-2">
                            Remove file
                        </label>
                    </div>
                <?php endif; ?>
                
                <div class="flex items-center">
                    <label for="attachment" class="cursor-pointer bg-gray-200 hover:bg-gray-300 px-4 py-2 rounded mr-3">
                        <i class="fas fa-upload mr-2"></i>Choose File
                    </label>
                    <input type="file" id="attachment" name="attachment" class="hidden">
                    <span id="file-name" class="text-sm text-gray-600">No file chosen</span>
                </div>
                <p class="text-xs text-gray-500 mt-1">Max size: 10MB. Allowed: images, PDF, DOC/DOCX</p>
            </div>

            <div class="flex justify-end gap-2">
                <a href="dashboard.php" class="bg-gray-200 hover:bg-gray-300 px-4 py-2 rounded">Cancel</a>
                <button type="submit" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded">
                    <i class="fas fa-save mr-2"></i>Update Quest
                </button>
            </div>
        </form>
    </div>

    <script>
        // Show selected file name
        document.getElementById('attachment').addEventListener('change', function(e) {
            const fileName = e.target.files.length ? e.target.files[0].name : 'No file chosen';
            document.getElementById('file-name').textContent = fileName;

            
        });
    </script>
</body>
</html>

index.php:
<?php
	if (!empty($_SERVER['HTTPS']) && ('on' == $_SERVER['HTTPS'])) {
		$uri = 'https://';
	} else {
		$uri = 'http://';
	}
	$uri .= $_SERVER['HTTP_HOST'];
	header('Location: '.$uri.'/dashboard/');
	exit;
?>

landing.php:
<?php
session_start();
if (!isset($_SESSION['user_id'])) {
    header('Location: login.php');
    exit();
}

// Set default values if not set
$current_theme = $_SESSION['theme'] ?? 'default';
$dark_mode = $_SESSION['dark_mode'] ?? false;
$font_size = $_SESSION['font_size'] ?? 'medium';

// Function to get the body class based on theme
function getBodyClass() {
    global $current_theme, $dark_mode;
    
    $classes = [];
    
    if ($dark_mode) {
        $classes[] = 'dark-mode';
    }
    
    if ($current_theme !== 'default') {
        $classes[] = $current_theme . '-theme';
    }
    
    return implode(' ', $classes);
}

// Function to get font size CSS
function getFontSize() {
    global $font_size;
    
    switch ($font_size) {
        case 'small': return '14px';
        case 'large': return '18px';
        default: return '16px';
    }
}
?>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Yoonet - Gamified Career Progression</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://unpkg.com/aos@2.3.1/dist/aos.css" rel="stylesheet">
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
    body {
      font-family: 'Inter', sans-serif;
    }
    .quest-card {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      transition: all 0.3s ease;
      transform: translateY(0);
    }
    .quest-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
    }
    .hero-gradient {
      background: linear-gradient(135deg, #1e3a8a 0%, #3b82f6 50%, #06b6d4 100%);
    }
    .feature-icon {
      background: linear-gradient(135deg, #f59e0b 0%, #ef4444 100%);
    }
    @keyframes float {
      0% { transform: translateY(0px); }
      50% { transform: translateY(-10px); }
      100% { transform: translateY(0px); }
    }
    .floating {
      animation: float 3s ease-in-out infinite;
    }
    .delay-1 {
      animation-delay: 0.2s;
    }
    .delay-2 {
      animation-delay: 0.4s;
    }
    .delay-3 {
      animation-delay: 0.6s;
    }
    .pulse {
      animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
    }
    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.8; }
    }

    :root {
        --primary-color: #4285f4;
        --secondary-color: #34a853;
        --background-color: #ffffff;
        --text-color: #333333;
        --card-bg: #f8f9fa;
        --border-color: #e0e0e0;
        --shadow-color: rgba(0, 0, 0, 0.1);
        --transition-speed: 0.4s;
    }

    /* Dark Mode */
    .dark-mode {
        --primary-color: #8ab4f8;
        --secondary-color: #81c995;
        --background-color: #121212;
        --text-color: #e0e0e0;
        --card-bg: #1e1e1e;
        --border-color: #333333;
        --shadow-color: rgba(0, 0, 0, 0.3);
    }

    /* Ocean Theme */
    .ocean-theme {
        --primary-color: #00a1f1;
        --secondary-color: #00c1d4;
        --background-color: #f0f8ff;
        --text-color: #003366;
        --card-bg: #e1f0fa;
        --border-color: #b3d4ff;
    }

    /* Forest Theme */
    .forest-theme {
        --primary-color: #228B22;
        --secondary-color: #2E8B57;
        --background-color: #f0fff0;
        --text-color: #013220;
        --card-bg: #e1fae1;
        --border-color: #98fb98;
    }

    /* Sunset Theme */
    .sunset-theme {
        --primary-color: #FF6B6B;
        --secondary-color: #FFA07A;
        --background-color: #FFF5E6;
        --text-color: #8B0000;
        --card-bg: #FFE8D6;
        --border-color: #FFB347;
    }

    /* Animation for theme change */
    @keyframes fadeIn {
        from { opacity: 0.8; }
        to { opacity: 1; }
    }

    .theme-change {
        animation: fadeIn var(--transition-speed) ease;
    }

    /* Apply transitions to elements that change with theme */
    body {
        background-color: var(--background-color);
        color: var(--text-color);
        transition: background-color var(--transition-speed) ease, 
                    color var(--transition-speed) ease;
    }

    /* Add this to any element that uses theme colors */
    .card, .btn-primary, .btn-secondary, 
    .assignment-section, .section-header, 
    .user-card, .progress-bar, .rank-badge,
    .status-badge, .xp-badge {
        transition: all var(--transition-speed) ease;
    }
  </style>
</head>

<script language="javascript" type="text/javascript">
function DisableBackButton() {
    window.history.forward();
}
DisableBackButton();
window.onload = DisableBackButton;
window.onpageshow = function(evt) { if (evt.persisted) DisableBackButton(); }
window.onunload = function() { void (0); }
</script>

<body class="<?php echo getBodyClass(); ?>" style="font-size: <?php echo getFontSize(); ?>;">

  <!-- Navigation -->
  <nav class="bg-white shadow-sm border-b">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex justify-between items-center h-16">
        <div class="flex items-center">
          <div class="flex-shrink-0 flex items-center space-x-2">
            <img src="assets/images/yoonet-logo.jpg" alt="Yoonet Logo" class="h-10 inline floating">
            <span class="text-2xl font-bold text-blue-600">Yoonet</span>
          </div>
        </div>
        <div class="hidden md:block">
          <div class="ml-10 flex items-center space-x-4">
            <span class="text-gray-600 px-3 py-2 text-sm font-medium">
              Welcome, <?php echo htmlspecialchars($_SESSION['full_name'] ?? 'User'); ?>
            </span>
            <a href="#how-it-works" class="text-gray-600 hover:text-blue-600 px-3 py-2 text-sm font-medium transition-colors">How It Works</a>
            <form action="includes/logout.php" method="POST" class="inline">
              <button type="submit" class="bg-red-50 hover:bg-red-100 text-red-600 px-4 py-2 rounded-md text-sm font-medium transition-colors">
                Sign Out
              </button>
            </form>
          </div>
        </div>
      </div>
    </div>
  </nav>

  <!-- Hero Section -->
  <section class="hero-gradient text-white py-20" data-aos="fade">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center">
        <h1 class="text-4xl md:text-6xl font-bold mb-6" data-aos="fade-up">
          Level Up Your Career
          <span class="block text-yellow-300" data-aos="fade-up" data-aos-delay="100">Through Epic Quests</span>
        </h1>
        <p class="text-xl md:text-2xl mb-8 text-blue-100 max-w-3xl mx-auto" data-aos="fade-up" data-aos-delay="200">
          Transform your professional development into an engaging adventure. Complete quests, earn rewards, and unlock new career opportunities.
        </p>
        <div class="flex flex-col sm:flex-row flex-wrap gap-4 justify-center" data-aos="fade-up" data-aos-delay="300">
          <a href="dashboard.php" class="bg-yellow-500 hover:bg-yellow-400 text-gray-900 px-8 py-4 rounded-lg text-lg font-semibold transition-colors shadow-lg flex items-center justify-center pulse">
            🚀 Start Your Quest
          </a>
          <button class="border-2 border-white text-white hover:bg-white hover:text-blue-600 px-8 py-4 rounded-lg text-lg font-semibold transition-colors">
            📺 Watch Demo
          </button>
         
           
        </div>
      </div>
    </div>
  </section>

  <!-- Quest Cards -->
  <section class="py-16 bg-white">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-12" data-aos="fade-up">
        <h2 class="text-3xl font-bold text-gray-900 mb-4">Your Career Adventure Awaits</h2>
        <p class="text-lg text-gray-600">Choose your path and start completing quests tailored to your goals</p>
      </div>
      <div class="grid md:grid-cols-3 gap-8">
        <div class="quest-card rounded-xl p-6 text-white" data-aos="fade-up" data-aos-delay="100">
          <div class="flex items-center mb-4">
            <span class="text-2xl mr-3">💻</span>
            <h3 class="text-xl font-semibold">Tech Mastery</h3>
          </div>
          <p class="mb-4 text-blue-100">Master new programming languages and frameworks</p>
          <div class="flex items-center justify-between">
            <span class="text-sm bg-white bg-opacity-20 px-3 py-1 rounded-full">12 Quests</span>
            <span class="text-yellow-300 font-semibold">⭐ 2,450 XP</span>
          </div>
        </div>
        <div class="quest-card rounded-xl p-6 text-white" data-aos="fade-up" data-aos-delay="200">
          <div class="flex items-center mb-4">
            <span class="text-2xl mr-3">👥</span>
            <h3 class="text-xl font-semibold">Leadership Path</h3>
          </div>
          <p class="mb-4 text-blue-100">Develop management and team leadership skills</p>
          <div class="flex items-center justify-between">
            <span class="text-sm bg-white bg-opacity-20 px-3 py-1 rounded-full">8 Quests</span>
            <span class="text-yellow-300 font-semibold">⭐ 1,800 XP</span>
          </div>
        </div>
        <div class="quest-card rounded-xl p-6 text-white" data-aos="fade-up" data-aos-delay="300">
          <div class="flex items-center mb-4">
            <span class="text-2xl mr-3">📈</span>
            <h3 class="text-xl font-semibold">Business Growth</h3>
          </div>
          <p class="mb-4 text-blue-100">Learn strategy, analytics, and market expansion</p>
          <div class="flex items-center justify-between">
            <span class="text-sm bg-white bg-opacity-20 px-3 py-1 rounded-full">15 Quests</span>
            <span class="text-yellow-300 font-semibold">⭐ 3,200 XP</span>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- How It Works -->
  <section id="how-it-works" class="py-16 bg-white">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-12" data-aos="fade-up">
        <h2 class="text-3xl font-bold text-gray-900 mb-4">How It Works</h2>
        <p class="text-lg text-gray-600">Start your career quest in three simple steps</p>
      </div>
      <div class="grid md:grid-cols-3 gap-8">
        <div class="text-center" data-aos="fade-up" data-aos-delay="100">
          <div class="bg-blue-100 w-20 h-20 rounded-full mx-auto mb-6 flex items-center justify-center floating delay-1">
            <span class="text-3xl font-bold text-blue-600">1</span>
          </div>
          <h3 class="text-xl font-semibold mb-4">Choose Your Quest</h3>
          <p class="text-gray-600">Select from hundreds of career-focused quests across different industries and skill levels</p>
        </div>
        <div class="text-center" data-aos="fade-up" data-aos-delay="200">
          <div class="bg-green-100 w-20 h-20 rounded-full mx-auto mb-6 flex items-center justify-center floating delay-2">
            <span class="text-3xl font-bold text-green-600">2</span>
          </div>
          <h3 class="text-xl font-semibold mb-4">Complete Challenges</h3>
          <p class="text-gray-600">Engage with interactive content, projects, and real-world scenarios to build skills</p>
        </div>
        <div class="text-center" data-aos="fade-up" data-aos-delay="300">
          <div class="bg-yellow-100 w-20 h-20 rounded-full mx-auto mb-6 flex items-center justify-center floating delay-3">
            <span class="text-3xl font-bold text-yellow-600">3</span>
          </div>
          <h3 class="text-xl font-semibold mb-4">Level Up & Advance</h3>
          <p class="text-gray-600">Earn rewards, unlock new opportunities, and accelerate your career growth</p>
        </div>
      </div>
    </div>
  </section>

  <!-- Call to Action -->
  <section class="py-16 bg-blue-600 text-white" data-aos="fade-up">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
      <h2 class="text-3xl font-bold mb-6">Ready to Begin Your Quest?</h2>
      <p class="text-xl mb-8 max-w-3xl mx-auto">Join hundreds of employees who are transforming their careers through gamified learning.</p>
      <a href="dashboard.php" class="inline-block bg-yellow-500 hover:bg-yellow-400 text-gray-900 px-8 py-4 rounded-lg text-lg font-semibold transition-colors shadow-lg">
        Start Your Adventure Now
      </a>
    </div>
  </section>

  <!-- Footer -->
  <footer class="bg-gray-900 text-white py-12">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="grid md:grid-cols-4 gap-8">
        <div>
          <div class="flex items-center space-x-2 mb-4">
            <img src="assets/images/yoonet-logo.jpg" alt="Yoonet Logo" class="h-6">
            <h3 class="text-xl font-bold">Yoonet</h3>
          </div>
          <p class="text-gray-400">Gamifying career development for the modern professional.</p>
        </div>
        <div>
          <h4 class="font-semibold mb-4">Company</h4>
          <ul class="space-y-2 text-gray-400">
            <li><a href="https://www.yoonet.io/our-company" target="_blank" rel="noopener noreferrer" class="hover:text-white transition-colors">About</a></li>
            <li><a href="https://www.yoonet.io/ph" target="_blank" rel="noopener noreferrer" class="hover:text-white transition-colors">Careers</a></li>
            <li><a href="https://www.yoonet.io/get-in-touch" target="_blank" rel="noopener noreferrer" class="hover:text-white transition-colors">Contact</a></li>
          </ul>
        </div>
        <div>
          <h4 class="font-semibold mb-4">Support</h4>
          <ul class="space-y-2 text-gray-400">
            <li><a href="https://www.facebook.com/yoonet.io" target="_blank" rel="noopener noreferrer" class="hover:text-white transition-colors">Community</a></li>
          </ul>
        </div>
      </div>
      <div class="border-t border-gray-800 mt-8 pt-8 text-center text-gray-400">
        <p>© Yoonet Quest Career Progression</p>
      </div>
    </div>
  </footer>

  <script src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>
  <script>
    // Initialize animations
    AOS.init({
      duration: 800,
      once: true
    });

    // Demo button functionality
    document.querySelectorAll('button').forEach(button => {
      button.addEventListener('click', function() {
        if (this.textContent.includes('Demo')) {
          alert('🎬 Demo video would play here. See how QuestCareer transforms careers!');
        } else if (this.textContent.includes('Career Paths')) {
          alert('📚 Discovering custom career paths based on your profile...');
        }
      });
    });

    // Smooth scrolling for anchor links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function(e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
          target.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }
      });
    });
  </script>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
        // Add theme change animation class
        document.body.classList.add('theme-change');
        
        // Remove animation class after animation completes
        setTimeout(() => {
            document.body.classList.remove('theme-change');
        }, 400);
    });
</script>

</body>
</html>

leaderboard.php:
<?php
require_once 'includes/config.php';
require_once 'includes/functions.php';

if (!is_logged_in()) {
    header('Location: login.php');
    exit();
}

// Initialize variables with default values
$leaderboard = [];
$user_stats = [
    'total_xp' => 0,
    'level' => 1,
    'rank' => 'Newbie',
    'progress_percent' => 0,
    'progress_text' => '0/50 XP'
];
$user_position = 'N/A';

// Get leaderboard data
try {
    // Main leaderboard query
    $stmt = $pdo->query("
        SELECT 
            u.employee_id, 
            u.full_name, 
            u.email,
            COALESCE(SUM(xh.xp_change), 0) as total_xp,
            FLOOR(COALESCE(SUM(xh.xp_change), 0) / 50 + 1) as level,
            CASE 
                WHEN COALESCE(SUM(xh.xp_change), 0) >= 200 THEN 'Expert'
                WHEN COALESCE(SUM(xh.xp_change), 0) >= 100 THEN 'Adventurer'
                WHEN COALESCE(SUM(xh.xp_change), 0) >= 50 THEN 'Explorer'
                ELSE 'Newbie'
            END as rank
        FROM users u
        LEFT JOIN xp_history xh ON u.employee_id = xh.employee_id
        GROUP BY u.employee_id, u.full_name, u.email
        ORDER BY total_xp DESC
        LIMIT 50
    ");
    $leaderboard = $stmt->fetchAll(PDO::FETCH_ASSOC);

    // Get current user's XP total
    $stmt = $pdo->prepare("
        SELECT COALESCE(SUM(xp_change), 0) as total_xp
        FROM xp_history
        WHERE employee_id = ?
    ");
    $stmt->execute([$_SESSION['employee_id']]);
    $total_xp = $stmt->fetchColumn();

    // Calculate user stats
    $level = floor($total_xp / 50) + 1;
    $xp_for_next_level = $total_xp % 50;
    $progress_percent = ($xp_for_next_level / 50) * 100;
    
    $user_stats = [
        'total_xp' => $total_xp,
        'level' => $level,
        'rank' => ($total_xp >= 200 ? 'Expert' : 
                 ($total_xp >= 100 ? 'Adventurer' : 
                 ($total_xp >= 50 ? 'Explorer' : 'Newbie'))),
        'progress_percent' => $progress_percent,
        'progress_text' => "$xp_for_next_level/50 XP"
    ];

    // Get user's position
    $stmt = $pdo->prepare("
        SELECT COUNT(*) + 1 as position
        FROM (
            SELECT employee_id, SUM(xp_change) as total_xp 
            FROM xp_history 
            GROUP BY employee_id
            HAVING SUM(xp_change) > ?
        ) as ranked_users
    ");
    $stmt->execute([$total_xp]);
    $user_position = $stmt->fetchColumn() ?: 'N/A';

} catch (PDOException $e) {
    error_log("Database error: " . $e->getMessage());
    $error = "Error loading leaderboard data";
}

// Set default values if not set
$current_theme = $_SESSION['theme'] ?? 'default';
$dark_mode = $_SESSION['dark_mode'] ?? false;
$font_size = $_SESSION['font_size'] ?? 'medium';

// Function to get the body class based on theme
function getBodyClass() {
    global $current_theme, $dark_mode;
    
    $classes = [];
    
    if ($dark_mode) {
        $classes[] = 'dark-mode';
    }
    
    if ($current_theme !== 'default') {
        $classes[] = $current_theme . '-theme';
    }
    
    return implode(' ', $classes);
}

// Function to get font size CSS
function getFontSize() {
    global $font_size;
    
    switch ($font_size) {
        case 'small': return '14px';
        case 'large': return '18px';
        default: return '16px';
    }
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Yoonet - Quest Leaderboard</title>
    <link rel="stylesheet" href="assets/css/style.css">
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f8fafc;
        }
        
        .rank-badge {
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            font-weight: bold;
            color: white;
        }
        
        .rank-1 {
            background: linear-gradient(135deg, #FFD700 0%, #FFC600 100%);
            box-shadow: 0 4px 6px rgba(251, 191, 36, 0.3);
        }
        
        .rank-2 {
            background: linear-gradient(135deg, #C0C0C0 0%, #D3D3D3 100%);
            box-shadow: 0 4px 6px rgba(209, 213, 219, 0.3);
        }
        
        .rank-3 {
            background: linear-gradient(135deg, #CD7F32 0%, #B87333 100%);
            box-shadow: 0 4px 6px rgba(180, 83, 9, 0.3);
        }
        
        .progress-bar {
            height: 8px;
            border-radius: 4px;
            background-color: #e2e8f0;
            overflow: hidden;
        }
        
        .progress-fill {
            height: 100%;
            border-radius: 4px;
            background: linear-gradient(90deg, #4f46e5, #10b981);
            transition: width 0.5s ease-in-out;
        }
        
        .user-card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            transition: all 0.3s ease;
        }
        
        .user-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
        }
        
        .current-user {
            border-left: 4px solid #3b82f6;
            background-color: #f8fafc;
        }
        
        .rank-title {
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
        }
        
        .title-expert {
            background-color: #8b5cf6;
            color: white;
        }
        
        .title-adventurer {
            background-color: #3b82f6;
            color: white;
        }
        
        .title-explorer {
            background-color: #10b981;
            color: white;
        }
        
        .title-newbie {
            background-color: #64748b;
            color: white;
        }
        
        .avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: #3b82f6;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            text-transform: uppercase;
        }
        
        .section-header {
            position: relative;
            padding-left: 1.25rem;
        }
        
        .section-header:before {
            content: "";
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 4px;
            border-radius: 2px;
            background: linear-gradient(to bottom, #4f46e5, #10b981);
        }
    :root {
        --primary-color: #4285f4;
        --secondary-color: #34a853;
        --background-color: #ffffff;
        --text-color: #333333;
        --card-bg: #f8f9fa;
        --border-color: #e0e0e0;
        --shadow-color: rgba(0, 0, 0, 0.1);
        --transition-speed: 0.4s;
    }

    /* Dark Mode */
    .dark-mode {
        --primary-color: #8ab4f8;
        --secondary-color: #81c995;
        --background-color: #121212;
        --text-color: #e0e0e0;
        --card-bg: #1e1e1e;
        --border-color: #333333;
        --shadow-color: rgba(0, 0, 0, 0.3);
    }

    /* Ocean Theme */
    .ocean-theme {
        --primary-color: #00a1f1;
        --secondary-color: #00c1d4;
        --background-color: #f0f8ff;
        --text-color: #003366;
        --card-bg: #e1f0fa;
        --border-color: #b3d4ff;
    }

    /* Forest Theme */
    .forest-theme {
        --primary-color: #228B22;
        --secondary-color: #2E8B57;
        --background-color: #f0fff0;
        --text-color: #013220;
        --card-bg: #e1fae1;
        --border-color: #98fb98;
    }

    /* Sunset Theme */
    .sunset-theme {
        --primary-color: #FF6B6B;
        --secondary-color: #FFA07A;
        --background-color: #FFF5E6;
        --text-color: #8B0000;
        --card-bg: #FFE8D6;
        --border-color: #FFB347;
    }

    /* Animation for theme change */
    @keyframes fadeIn {
        from { opacity: 0.8; }
        to { opacity: 1; }
    }

    .theme-change {
        animation: fadeIn var(--transition-speed) ease;
    }

    /* Apply transitions to elements that change with theme */
    body {
        background-color: var(--background-color);
        color: var(--text-color);
        transition: background-color var(--transition-speed) ease, 
                    color var(--transition-speed) ease;
    }

    /* Add this to any element that uses theme colors */
    .card, .btn-primary, .btn-secondary, 
    .assignment-section, .section-header, 
    .user-card, .progress-bar, .rank-badge,
    .status-badge, .xp-badge {
        transition: all var(--transition-speed) ease;
    }
    </style>
</head>

<script language="javascript" type="text/javascript">
function DisableBackButton() {
    window.history.forward();
}
DisableBackButton();
window.onload = DisableBackButton;
window.onpageshow = function(evt) { if (evt.persisted) DisableBackButton(); }
window.onunload = function() { void (0); }
</script>

<body class="<?php echo getBodyClass(); ?>" style="font-size: <?php echo getFontSize(); ?>;">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Header -->
        <header class="flex flex-col sm:flex-row justify-between items-center mb-8">
            <div class="flex items-center gap-4 mb-4 sm:mb-0">
                <img src="assets/images/yoonet-logo.jpg" alt="Yoonet Logo" class="h-12 w-auto">
                <div>
                    <h1 class="text-2xl font-bold text-gray-900">Quest Leaderboard</h1>
                    <p class="text-sm text-gray-600">Global rankings based on XP earned</p>
                </div>
            </div>
            <div class="flex items-center gap-3">
                <a href="dashboard.php" class="flex items-center gap-2 text-gray-600 hover:text-blue-600 transition-colors">
                    <i class="fas fa-arrow-left"></i>
                    <span class="hidden sm:inline">Back to Dashboard</span>
                </a>
                <a href="logout.php" class="flex items-center gap-2 text-gray-600 hover:text-red-600 transition-colors">
                    <i class="fas fa-sign-out-alt"></i>
                    <span class="hidden sm:inline">Logout</span>
                </a>
            </div>
        </header>
        
        <!-- User Stats -->
        <div class="user-card p-6 mb-8">
            <div class="flex flex-col md:flex-row items-center justify-between gap-6">
                <div class="flex items-center gap-4">
                    <div class="avatar bg-blue-100 text-blue-600">
                        <?php echo substr($_SESSION['full_name'], 0, 1); ?>
                    </div>
                    <div>
                        <h2 class="font-bold text-lg text-gray-900"><?php echo htmlspecialchars($_SESSION['full_name']); ?></h2>
                        <p class="text-sm text-gray-500"><?php echo htmlspecialchars($_SESSION['employee_id']); ?></p>
                    </div>
                </div>
                
                <div class="grid grid-cols-2 md:grid-cols-4 gap-4 w-full md:w-auto">
                    <div class="text-center">
                        <p class="text-sm text-gray-500 mb-1">Rank</p>
                        <p class="text-xl font-bold text-purple-600">#<?php echo $user_position; ?></p>
                    </div>
                    <div class="text-center">
                        <p class="text-sm text-gray-500 mb-1">Total XP</p>
                        <p class="text-xl font-bold text-green-600"><?php echo number_format($user_stats['total_xp']); ?></p>
                    </div>
                    <div class="text-center">
                        <p class="text-sm text-gray-500 mb-1">Level</p>
                        <p class="text-xl font-bold text-blue-600"><?php echo $user_stats['level']; ?></p>
                    </div>
                    <div class="text-center">
                        <p class="text-sm text-gray-500 mb-1">Title</p>
                        <p class="text-xl font-bold <?php 
                            echo $user_stats['rank'] === 'Expert' ? 'text-purple-600' : 
                                 ($user_stats['rank'] === 'Adventurer' ? 'text-blue-600' : 
                                 ($user_stats['rank'] === 'Explorer' ? 'text-green-600' : 'text-gray-600')); 
                        ?>">
                            <?php echo $user_stats['rank']; ?>
                        </p>
                    </div>
                </div>
            </div>
            
            <div class="mt-6">
                <div class="flex justify-between text-sm mb-2">
                    <span class="text-gray-600">Progress to level <?php echo $user_stats['level'] + 1; ?></span>
                    <span class="font-medium"><?php echo $user_stats['progress_text']; ?></span>
                </div>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: <?php echo $user_stats['progress_percent']; ?>%"></div>
                </div>
            </div>
        </div>
        
        <!-- Leaderboard -->
        <div class="section-header mb-6">
            <h2 class="text-xl font-bold text-gray-900 flex items-center gap-2">
                <i class="fas fa-trophy text-yellow-500"></i>
                Top Performers
            </h2>
        </div>
        
        <?php if (!empty($leaderboard)): ?>
            <div class="bg-white rounded-xl shadow-sm overflow-hidden">
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Rank</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Employee</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">XP</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Level</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Title</th>
                                <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Progress</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            <?php foreach ($leaderboard as $index => $user): ?>
                                <?php 
                                    $is_current_user = $user['employee_id'] === $_SESSION['employee_id'];
                                    $xp_for_level = $user['total_xp'] % 50;
                                    $progress_percent = ($xp_for_level / 50) * 100;
                                ?>
                                <tr class="<?php echo $is_current_user ? 'current-user' : ''; ?> hover:bg-gray-50 transition-colors">
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <?php if ($index < 3): ?>
                                            <div class="rank-badge rank-<?php echo $index + 1; ?>">
                                                <?php echo $index + 1; ?>
                                            </div>
                                        <?php else: ?>
                                            <span class="text-gray-700 font-medium"><?php echo $index + 1; ?></span>
                                        <?php endif; ?>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="flex items-center">
                                            <div class="avatar mr-3" style="background-color: <?php echo $is_current_user ? '#3b82f6' : '#e2e8f0'; ?>; color: <?php echo $is_current_user ? 'white' : '#64748b'; ?>">
                                                <?php echo substr($user['full_name'], 0, 1); ?>
                                            </div>
                                            <div>
                                                <div class="text-sm font-medium <?php echo $is_current_user ? 'text-blue-600' : 'text-gray-900'; ?>">
                                                    <?php echo htmlspecialchars($user['full_name']); ?>
                                                    <?php if ($is_current_user): ?>
                                                        <span class="ml-2 text-xs bg-blue-100 text-blue-800 px-2 py-0.5 rounded-full">You</span>
                                                    <?php endif; ?>
                                                </div>
                                                <div class="text-sm text-gray-500"><?php echo htmlspecialchars($user['employee_id']); ?></div>
                                            </div>
                                        </div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                        <?php echo number_format($user['total_xp']); ?>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                        <?php echo $user['level']; ?>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <span class="rank-title <?php 
                                            echo $user['rank'] === 'Expert' ? 'title-expert' : 
                                                 ($user['rank'] === 'Adventurer' ? 'title-adventurer' : 
                                                 ($user['rank'] === 'Explorer' ? 'title-explorer' : 'title-newbie')); 
                                        ?>">
                                            <?php echo $user['rank']; ?>
                                        </span>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="flex items-center gap-3">
                                            <div class="w-full max-w-xs">
                                                <div class="flex justify-between text-xs mb-1">
                                                    <span class="text-gray-500">Lvl <?php echo $user['level'] + 1; ?></span>
                                                    <span class="font-medium"><?php echo $xp_for_level; ?>/50</span>
                                                </div>
                                                <div class="progress-bar">
                                                    <div class="progress-fill" style="width: <?php echo $progress_percent; ?>%"></div>
                                                </div>
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                            <?php endforeach; ?>
                        </tbody>
                    </table>
                </div>
            </div>
        <?php else: ?>
            <div class="bg-white rounded-xl shadow-sm p-8 text-center">
                <div class="mx-auto max-w-md">
                    <i class="fas fa-trophy text-gray-300 text-5xl mb-4"></i>
                    <h3 class="text-lg font-medium text-gray-900 mb-2">No data available</h3>
                    <p class="text-gray-500 mb-6">Complete quests to appear on the leaderboard.</p>
                    <a href="dashboard.php" class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
                        <i class="fas fa-arrow-right mr-2"></i>
                        Start Your First Quest
                    </a>
                </div>
            </div>
        <?php endif; ?>
    </div>
    
    <script>
        // Animation for progress bars
        document.addEventListener('DOMContentLoaded', function() {
            const progressBars = document.querySelectorAll('.progress-fill');
            
            progressBars.forEach(bar => {
                // Store original width
                const originalWidth = bar.style.width;
                // Set to 0 for animation
                bar.style.width = '0';
                // Trigger reflow
                bar.offsetHeight;
                // Animate to original width
                bar.style.width = originalWidth;
            });
            
            // Highlight current user in the leaderboard
            const currentUserId = "<?php echo $_SESSION['employee_id']; ?>";
            const currentUserRow = document.querySelector(`tr[data-user-id="${currentUserId}"]`);
            
            if (currentUserRow) {
                currentUserRow.scrollIntoView({
                    behavior: 'smooth',
                    block: 'center'
                });
            }
        });
    </script>
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        // Add theme change animation class
        document.body.classList.add('theme-change');
        
        // Remove animation class after animation completes
        setTimeout(() => {
            document.body.classList.remove('theme-change');
        }, 400);
    });
</script>
</body>
</html>

login.php:

<?php
require_once 'includes/config.php';
require_once 'includes/functions.php';

// Clear registration messages
unset($_SESSION['reg_error']);
unset($_SESSION['form_data']);

if (is_logged_in()) {
    header('Location: dashboard.php');
    exit();
}

// Get messages
$error = $_SESSION['login_error'] ?? '';
unset($_SESSION['login_error']);

$success = $_SESSION['reg_success'] ?? '';
unset($_SESSION['reg_success']);
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Yoonet - Quest Login</title>
    <link rel="stylesheet" href="assets/css/style.css">
</head>

<script language="javascript" type="text/javascript">
function DisableBackButton() {
    window.history.forward();
}
DisableBackButton();
window.onload = DisableBackButton;
window.onpageshow = function(evt) { if (evt.persisted) DisableBackButton(); }
window.onunload = function() { void (0); }
</script>


<body>
    <div class="login-container">
        <div class="login-header">
            <img src="assets/images/yoonet-logo.jpg" alt="Yoonet Logo" class="logo">
            <h1>Quest Portal</h1>
            <p>Login to access your career progression quests</p>
        </div>
        
        <?php if ($error): ?>
            <div class="alert alert-error">
                <?php echo htmlspecialchars($error); ?>
                <p class="error-help">Don't have an account? <a href="register.php">Register here</a></p>
            </div>
        <?php endif; ?>
        
        <?php if ($success): ?>
            <div class="alert alert-success">
                <?php echo htmlspecialchars($success); ?>
            </div>
        <?php endif; ?>
        
        <form action="includes/login.php" method="POST" class="login-form">
            <div class="form-group">
                <label for="employee_id">Employee ID</label>
                <input type="text" id="employee_id" name="employee_id" required>
            </div>
            
            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" id="password" name="password" required>
            </div>
            
            <button type="submit" name="login" class="btn-login">Login</button>
        </form>
        
        <div class="login-footer">
            <p>New to Yoonet Quest? <a href="register.php">Register here</a></p>
        </div>
    </div>
</body>
</html>

logout.php:
<?php
require_once 'includes/config.php';
require_once 'includes/functions.php';

// Destroy all session data
$_SESSION = array();
session_destroy();

// Redirect to login page
header('Location: login.php');
exit();
?>

register.php:
<?php
require_once 'includes/config.php';
require_once 'includes/functions.php';

// Clear login messages
unset($_SESSION['login_error']);

if (is_logged_in()) {
    header('Location: dashboard.php');
    exit();
}

// Get messages and form data
$error = $_SESSION['reg_error'] ?? '';
unset($_SESSION['reg_error']);

$form_data = $_SESSION['form_data'] ?? [];
unset($_SESSION['form_data']);

// Define available roles
$roles = [
    'quest_taker' => 'Quest Taker',
    'quest_giver' => 'Quest Giver',
    'hybrid' => 'Hybrid (Both)'
];
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Yoonet - Quest Registration</title>
    <link rel="stylesheet" href="assets/css/style.css">
    <style>
        /* Style to match existing input fields exactly */
        .form-group select {
            width: 100%;
            padding: 12px 15px;
            margin: 8px 0 20px 0;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
            background-color: white;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
            background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: right 15px center;
            background-size: 16px;
        }

        .form-group select:focus {
            outline: none;
            border-color: #4CAF50;
            box-shadow: 0 0 0 2px rgba(76, 175, 80, 0.2);
        }
    </style>
</head>

<script language="javascript" type="text/javascript">
function DisableBackButton() {
    window.history.forward();
}
DisableBackButton();
window.onload = DisableBackButton;
window.onpageshow = function(evt) { if (evt.persisted) DisableBackButton(); }
window.onunload = function() { void (0); }
</script>


<body>
    <div class="login-container">
        <div class="login-header">
            <img src="assets/images/yoonet-logo.jpg" alt="Yoonet Logo" class="logo">
            <h1>Quest Registration</h1>
            <p>Register with your Yoonet employee ID</p>
        </div>
        
        <?php if ($error): ?>
            <div class="alert alert-error"><?php echo htmlspecialchars($error); ?></div>
        <?php endif; ?>
        
        <form action="includes/auth.php" method="POST" class="login-form">
            <div class="form-group">
                <label for="employee_id">Employee ID</label>
                <input type="text" id="employee_id" name="employee_id" 
                       value="<?php echo htmlspecialchars($form_data['employee_id'] ?? ''); ?>" required>
            </div>
            
            <div class="form-group">
                <label for="full_name">Full Name</label>
                <input type="text" id="full_name" name="full_name" 
                       value="<?php echo htmlspecialchars($form_data['full_name'] ?? ''); ?>" required>
            </div>
            
            <div class="form-group">
                <label for="email">Email</label>
                <input type="email" id="email" name="email" 
                       value="<?php echo htmlspecialchars($form_data['email'] ?? ''); ?>" required>
            </div>
            
            <div class="form-group">
                <label for="password">Password (must be 8 characters)</label>
                <input type="password" id="password" name="password" required>
            </div>
            
            <div class="form-group">
                <label for="confirm_password">Confirm Password</label>
                <input type="password" id="confirm_password" name="confirm_password" required>
            </div>
            
            <div class="form-group">
                <label for="role">Role</label>
                <select id="role" name="role" required>
                    <option value="" disabled selected>Select your role</option>
                    <?php foreach ($roles as $value => $label): ?>
                        <option value="<?php echo htmlspecialchars($value); ?>"
                            <?php if (isset($form_data['role']) && $form_data['role'] === $value) echo 'selected'; ?>>
                            <?php echo htmlspecialchars($label); ?>
                        </option>
                    <?php endforeach; ?>
                </select>
            </div>
            
            <button type="submit" name="register" class="btn-login">Register</button>
        </form>
        
        <div class="login-footer">
            <p>Already have an account? <a href="login.php">Login here</a></p>
        </div>
    </div>
</body>
</html>

settings.php:
<?php
// Start session to store user preferences
session_start();

// Handle form submission
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    // Handle reset request
    if (isset($_POST['reset'])) {
        session_unset();
        session_destroy();
        session_start();
        
        // Clear all preference cookies
        setcookie('theme', '', time() - 3600, "/");
        setcookie('theme_shade', '', time() - 3600, "/");
        setcookie('notifications', '', time() - 3600, "/");
        setcookie('font_size', '', time() - 3600, "/");
    } else {
        // Save theme preference to session and cookies
        if (isset($_POST['theme'])) {
            $_SESSION['theme'] = $_POST['theme'];
            setcookie('theme', $_POST['theme'], time() + (365 * 24 * 60 * 60), "/");
        }
        
        // Save theme shade preference
        if (isset($_POST['theme_shade'])) {
            $_SESSION['theme_shade'] = $_POST['theme_shade'];
            setcookie('theme_shade', $_POST['theme_shade'], time() + (365 * 24 * 60 * 60), "/");
        }
        
        // Save other settings to session and cookies
        $notifications_value = isset($_POST['notifications']) ? '1' : '0';
        $_SESSION['notifications'] = isset($_POST['notifications']);
        setcookie('notifications', $notifications_value, time() + (365 * 24 * 60 * 60), "/");
        
        if (isset($_POST['font_size'])) {
            $_SESSION['font_size'] = $_POST['font_size'];
            setcookie('font_size', $_POST['font_size'], time() + (365 * 24 * 60 * 60), "/");
        }
        
        // Set success flag for animation
        $_SESSION['settings_saved'] = true;
    }
    
    // Redirect to avoid form resubmission
    header('Location: ' . $_SERVER['PHP_SELF']);
    exit;
}

// Set default values if not set - check session first, then cookies
$current_theme = $_SESSION['theme'] ?? ($_COOKIE['theme'] ?? 'default');
$current_shade = $_SESSION['theme_shade'] ?? ($_COOKIE['theme_shade'] ?? 'default');
$notifications = isset($_SESSION['notifications']) ? $_SESSION['notifications'] : (isset($_COOKIE['notifications']) ? $_COOKIE['notifications'] === '1' : true);
$font_size = $_SESSION['font_size'] ?? ($_COOKIE['font_size'] ?? 'medium');

// Check if settings were just saved
$show_success = isset($_SESSION['settings_saved']);
unset($_SESSION['settings_saved']);

// Function to get the body class based on theme
function getBodyClass() {
    global $current_theme, $current_shade;
    
    $classes = [];
    
    if ($current_theme !== 'default') {
        $classes[] = $current_theme . '-theme';
        if ($current_shade !== 'default') {
            $classes[] = $current_shade;
        }
    }
    
    return implode(' ', $classes);
}

// Function to get font size CSS
function getFontSize() {
    global $font_size;
    
    switch ($font_size) {
        case 'small': return '14px';
        case 'large': return '18px';
        default: return '16px';
    }
}
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Settings</title>
    <style>
        :root {
            --primary-color: #4285f4;
            --secondary-color: #34a853;
            --background-color: #ffffff;
            --text-color: #333333;
            --card-bg: #f8f9fa;
            --border-color: #e0e0e0;
            --shadow-color: rgba(0, 0, 0, 0.1);
            --transition-speed: 0.4s;
        }

        /* Default Theme */
        .default-theme {
            --primary-color: #4285f4;
            --secondary-color: #34a853;
        }

        /* Ocean Theme */
        .ocean-theme {
            --primary-color: #00a1f1;
            --secondary-color: #00c1d4;
            --background-color: #f0f8ff;
            --text-color: #003366;
            --card-bg: #e1f0fa;
            --border-color: #b3d4ff;
        }

        /* Ocean Theme Shades */
        .ocean-light {
            --primary-color: #66b5f8;
            --secondary-color: #66d1e4;
        }
        .ocean-dark {
            --primary-color: #0077cc;
            --secondary-color: #0091b4;
        }

        /* Forest Theme */
        .forest-theme {
            --primary-color: #228B22;
            --secondary-color: #2E8B57;
            --background-color: #f0fff0;
            --text-color: #013220;
            --card-bg: #e1fae1;
            --border-color: #98fb98;
        }

        /* Forest Theme Shades */
        .forest-light {
            --primary-color: #3cb371;
            --secondary-color: #48d1cc;
        }
        .forest-dark {
            --primary-color: #006400;
            --secondary-color: #1e6b52;
        }

        /* Sunset Theme */
        .sunset-theme {
            --primary-color: #FF6B6B;
            --secondary-color: #FFA07A;
            --background-color: #FFF5E6;
            --text-color: #8B0000;
            --card-bg: #FFE8D6;
            --border-color: #FFB347;
        }

        /* Sunset Theme Shades */
        .sunset-light {
            --primary-color: #ff8c8c;
            --secondary-color: #ffb89a;
        }
        .sunset-dark {
            --primary-color: #e64c4c;
            --secondary-color: #e68a5a;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: var(--background-color);
            color: var(--text-color);
            margin: 0;
            padding: 0;
            transition: all var(--transition-speed) ease;
            font-size: <?php echo getFontSize(); ?>;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            transition: all var(--transition-speed) ease;
        }

        h1 {
            color: var(--primary-color);
            text-align: center;
            margin-bottom: 30px;
            transition: color var(--transition-speed) ease;
        }

        .settings-card {
            background-color: var(--card-bg);
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 4px 6px var(--shadow-color);
            border: 1px solid var(--border-color);
            transition: all var(--transition-speed) ease;
        }

        .settings-group {
            margin-bottom: 25px;
        }

        .settings-group h2 {
            margin-top: 0;
            color: var(--secondary-color);
            font-size: 1.2rem;
            padding-bottom: 8px;
            border-bottom: 1px solid var(--border-color);
            transition: all var(--transition-speed) ease;
        }

        .option {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 0;
            border-bottom: 1px dashed var(--border-color);
            transition: all var(--transition-speed) ease;
        }

        .option:last-child {
            border-bottom: none;
        }

        .option-label {
            font-weight: 500;
        }

        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 50px;
            height: 24px;
        }

        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 24px;
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 16px;
            width: 16px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

        input:checked + .slider {
            background-color: var(--primary-color);
        }

        input:checked + .slider:before {
            transform: translateX(26px);
        }

        select {
            padding: 8px 12px;
            border-radius: 5px;
            border: 1px solid var(--border-color);
            background-color: var(--card-bg);
            color: var(--text-color);
            cursor: pointer;
            transition: all var(--transition-speed) ease;
        }

        .theme-options {
            display: flex;
            gap: 15px;
            margin-top: 10px;
            flex-wrap: wrap;
            justify-content: center;
        }

        .theme-option {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            cursor: pointer;
            border: 2px solid transparent;
            transition: all 0.2s ease;
            box-shadow: 0 2px 4px var(--shadow-color);
            position: relative;
        }

        .theme-option:hover {
            transform: scale(1.1);
        }

        .theme-option.selected {
            border-color: var(--primary-color);
            transform: scale(1.1);
            box-shadow: 0 0 0 2px var(--primary-color);
        }

        .theme-option::after {
            content: attr(title);
            position: absolute;
            bottom: -30px;
            left: 50%;
            transform: translateX(-50%);
            background: var(--card-bg);
            color: var(--text-color);
            padding: 3px 8px;
            border-radius: 4px;
            font-size: 12px;
            white-space: nowrap;
            opacity: 0;
            transition: opacity 0.2s;
            pointer-events: none;
            box-shadow: 0 2px 4px var(--shadow-color);
        }

        .theme-option:hover::after {
            opacity: 1;
        }

        .shade-options {
            display: none;
            margin-top: 10px;
            padding-left: 0;
            justify-content: center;
        }

        .shade-options.active {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        .shade-option {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            cursor: pointer;
            border: 2px solid transparent;
            transition: all 0.2s ease;
            box-shadow: 0 1px 3px var(--shadow-color);
            position: relative;
        }

        .shade-option.selected {
            border-color: var(--primary-color);
            transform: scale(1.1);
        }

        .shade-option::after {
            content: attr(title);
            position: absolute;
            bottom: -25px;
            left: 50%;
            transform: translateX(-50%);
            background: var(--card-bg);
            color: var(--text-color);
            padding: 2px 6px;
            border-radius: 4px;
            font-size: 10px;
            white-space: nowrap;
            opacity: 0;
            transition: opacity 0.2s;
            pointer-events: none;
            box-shadow: 0 1px 3px var(--shadow-color);
        }

        .shade-option:hover::after {
            opacity: 1;
        }

        #defaultTheme { background-color: #ffffff; border: 1px solid #ddd; }
        #oceanTheme { background-color: #00a1f1; }
        #forestTheme { background-color: #228B22; }
        #sunsetTheme { background-color: #FF6B6B; }

        /* Shade colors */
        .ocean-default-shade { background-color: #00a1f1; }
        .ocean-light-shade { background-color: #66b5f8; }
        .ocean-dark-shade { background-color: #0077cc; }

        .forest-default-shade { background-color: #228B22; }
        .forest-light-shade { background-color: #3cb371; }
        .forest-dark-shade { background-color: #006400; }

        .sunset-default-shade { background-color: #FF6B6B; }
        .sunset-light-shade { background-color: #ff8c8c; }
        .sunset-dark-shade { background-color: #e64c4c; }

        .reset-btn {
            background-color: var(--secondary-color);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-weight: bold;
            transition: all var(--transition-speed) ease;
        }

        .reset-btn:hover {
            opacity: 0.9;
            transform: translateY(-1px);
        }

        /* Save button specific styles */
        .save-btn {
            background-color: var(--primary-color);
        }

        /* Back button styles */
        .back-btn {
            display: inline-block;
            margin-bottom: 20px;
            padding: 8px 16px;
            background-color: var(--primary-color);
            color: white;
            text-decoration: none;
            border-radius: 5px;
            transition: all var(--transition-speed) ease;
        }

        .back-btn:hover {
            background-color: var(--secondary-color);
            transform: translateY(-1px);
        }

        /* Animation for theme change */
        @keyframes fadeIn {
            from { opacity: 0.8; }
            to { opacity: 1; }
        }

        .theme-change {
            animation: fadeIn var(--transition-speed) ease;
        }

        /* Success animation */
        @keyframes successPulse {
            0% { transform: scale(1); box-shadow: 0 0 0 0 rgba(52, 168, 83, 0.7); }
            70% { transform: scale(1.05); box-shadow: 0 0 0 10px rgba(52, 168, 83, 0); }
            100% { transform: scale(1); box-shadow: 0 0 0 0 rgba(52, 168, 83, 0); }
        }

        .success-animation {
            animation: successPulse 1s;
        }

        /* Success message */
        .success-message {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background-color: var(--secondary-color);
            color: white;
            padding: 10px 20px;
            border-radius: 5px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
            z-index: 1000;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .success-message.show {
            opacity: 1;
        }
    </style>
</head>
<body class="<?php echo getBodyClass(); ?>">
    <?php if ($show_success): ?>
    <div class="success-message show" id="successMessage">
        Settings saved successfully!
    </div>
    <?php endif; ?>
    
    <div class="container">
        <a href="dashboard.php" class="back-btn">&larr; Back to Dashboard</a>
        
        <h1>Settings</h1>
        
        <form method="POST" action="">
            <div class="settings-card">
                <div class="settings-group">
                    <h2>Theme</h2>
                    
                    <div class="theme-options">
                        <div class="theme-option <?php echo $current_theme === 'default' ? 'selected' : ''; ?>" 
                             id="defaultTheme" 
                             data-theme="default" 
                             title="Default Theme"
                             onclick="selectTheme('default')"></div>
                             
                        <div class="theme-option <?php echo $current_theme === 'ocean' ? 'selected' : ''; ?>" 
                             id="oceanTheme" 
                             data-theme="ocean" 
                             title="Ocean Theme"
                             onclick="selectTheme('ocean')"></div>
                             
                        <div class="theme-option <?php echo $current_theme === 'forest' ? 'selected' : ''; ?>" 
                             id="forestTheme" 
                             data-theme="forest" 
                             title="Forest Theme"
                             onclick="selectTheme('forest')"></div>
                             
                        <div class="theme-option <?php echo $current_theme === 'sunset' ? 'selected' : ''; ?>" 
                             id="sunsetTheme" 
                             data-theme="sunset" 
                             title="Sunset Theme"
                             onclick="selectTheme('sunset')"></div>
                    </div>
                    
                    <!-- Shade options container -->
                    <div id="shadeOptionsContainer">
                        <?php if ($current_theme !== 'default'): ?>
                        <div class="shade-options active" id="<?php echo $current_theme; ?>Shades">
                            <div class="shade-option <?php echo $current_shade === 'default' ? 'selected' : ''; ?> 
                                 <?php echo $current_theme; ?>-default-shade" 
                                 title="Default Shade"
                                 onclick="selectShade('default', '<?php echo $current_theme; ?>')"></div>
                                 
                            <div class="shade-option <?php echo $current_shade === $current_theme.'-light' ? 'selected' : ''; ?> 
                                 <?php echo $current_theme; ?>-light-shade" 
                                 title="Light Shade"
                                 onclick="selectShade('<?php echo $current_theme; ?>-light', '<?php echo $current_theme; ?>')"></div>
                                 
                            <div class="shade-option <?php echo $current_shade === $current_theme.'-dark' ? 'selected' : ''; ?> 
                                 <?php echo $current_theme; ?>-dark-shade" 
                                 title="Dark Shade"
                                 onclick="selectShade('<?php echo $current_theme; ?>-dark', '<?php echo $current_theme; ?>')"></div>
                        </div>
                        <?php endif; ?>
                    </div>
                    <input type="hidden" name="theme" id="themeInput" value="<?php echo $current_theme; ?>">
                    <input type="hidden" name="theme_shade" id="themeShadeInput" value="<?php echo $current_shade; ?>">
                </div>
            </div>
            
            <div class="settings-card">
                <div class="settings-group">
                    <h2>Other Settings</h2>
                    
                    <div class="option">
                        <span class="option-label">Notifications</span>
                        <label class="toggle-switch">
                            <input type="checkbox" name="notifications" id="notificationsToggle" <?php echo $notifications ? 'checked' : ''; ?>>
                            <span class="slider"></span>
                        </label>
                    </div>
                    
                    <div class="option">
                        <span class="option-label">Font Size</span>
                        <select name="font_size" id="fontSizeSelector">
                            <option value="small" <?php echo $font_size === 'small' ? 'selected' : ''; ?>>Small</option>
                            <option value="medium" <?php echo $font_size === 'medium' ? 'selected' : ''; ?>>Medium</option>
                            <option value="large" <?php echo $font_size === 'large' ? 'selected' : ''; ?>>Large</option>
                        </select>
                    </div>
                </div>
            </div>
            
            <div class="settings-card" style="text-align: center;">
                <button type="submit" class="reset-btn save-btn" id="saveSettings">Save Settings</button>
                <button type="button" class="reset-btn" id="resetSettings" style="margin-left: 10px; background-color: #f44336;">Reset to Defaults</button>
            </div>
        </form>
    </div>

    <script>
        // Store original theme for reset
        const originalTheme = "<?php echo $current_theme; ?>";
        const originalShade = "<?php echo $current_shade; ?>";
        let previewTheme = originalTheme;
        let previewShade = originalShade;

        document.addEventListener('DOMContentLoaded', function() {
            // Add theme change animation class
            document.body.classList.add('theme-change');
            
            // Remove animation class after animation completes
            setTimeout(() => {
                document.body.classList.remove('theme-change');
            }, 400);
            
            // Handle success message fade out
            const successMessage = document.getElementById('successMessage');
            if (successMessage) {
                setTimeout(() => {
                    successMessage.classList.remove('show');
                }, 3000);
            }
            
            // Add animation to save button on click
            document.getElementById('saveSettings').addEventListener('click', function() {
                this.classList.add('success-animation');
                setTimeout(() => {
                    this.classList.remove('success-animation');
                }, 1000);
            });
            
            // Reset Settings
            document.getElementById('resetSettings').addEventListener('click', function() {
                if (confirm('Are you sure you want to reset all settings to default?')) {
                    // Reset preview to original values
                    previewTheme = originalTheme;
                    previewShade = originalShade;
                    
                    // Update the form inputs
                    document.getElementById('themeInput').value = originalTheme;
                    document.getElementById('themeShadeInput').value = originalShade;
                    
                    // Create a form and submit it to reset settings
                    const form = document.createElement('form');
                    form.method = 'POST';
                    form.action = '';
                    
                    // Add reset parameter
                    const input = document.createElement('input');
                    input.type = 'hidden';
                    input.name = 'reset';
                    input.value = 'true';
                    form.appendChild(input);
                    
                    document.body.appendChild(form);
                    form.submit();
                }
            });
        });
        
        function selectTheme(theme) {
            // Update preview theme
            previewTheme = theme;
            
            // Reset shade to default when changing themes
            previewShade = 'default';
            
            // Update the hidden inputs
            document.getElementById('themeInput').value = theme;
            document.getElementById('themeShadeInput').value = previewShade;
            
            // Update selected state for theme options
            const themeOptions = document.querySelectorAll('.theme-option');
            themeOptions.forEach(option => {
                option.classList.remove('selected');
                if (option.getAttribute('data-theme') === theme) {
                    option.classList.add('selected');
                }
            });
            
            // Update shade options
            const shadeContainer = document.getElementById('shadeOptionsContainer');
            shadeContainer.innerHTML = '';
            
            if (theme !== 'default') {
                const shadeOptions = document.createElement('div');
                shadeOptions.className = 'shade-options active';
                shadeOptions.id = theme + 'Shades';
                
                // Create shade options
                const defaultShade = document.createElement('div');
                defaultShade.className = 'shade-option selected ' + theme + '-default-shade';
                defaultShade.title = 'Default Shade';
                defaultShade.onclick = function() { selectShade('default', theme); };
                
                const lightShade = document.createElement('div');
                lightShade.className = 'shade-option ' + theme + '-light-shade';
                lightShade.title = 'Light Shade';
                lightShade.onclick = function() { selectShade(theme + '-light', theme); };
                
                const darkShade = document.createElement('div');
                darkShade.className = 'shade-option ' + theme + '-dark-shade';
                darkShade.title = 'Dark Shade';
                darkShade.onclick = function() { selectShade(theme + '-dark', theme); };
                
                shadeOptions.appendChild(defaultShade);
                shadeOptions.appendChild(lightShade);
                shadeOptions.appendChild(darkShade);
                
                shadeContainer.appendChild(shadeOptions);
            }
            
            // Update body class for preview
            updateBodyClass();
        }
        
        function selectShade(shade, theme) {
            // Update preview shade
            previewShade = shade;
            
            // Update the hidden input
            document.getElementById('themeShadeInput').value = shade;
            
            // Update selected state for shade options
            const shadeOptions = document.querySelectorAll('#' + theme + 'Shades .shade-option');
            shadeOptions.forEach(option => {
                option.classList.remove('selected');
            });
            
            // Add selected class to clicked shade
            event.target.classList.add('selected');
            
            // Update body class for preview
            updateBodyClass();
        }
        
        function updateBodyClass() {
            // Remove all theme-related classes
            const body = document.body;
            body.classList.remove('default-theme', 'ocean-theme', 'forest-theme', 'sunset-theme',
                                'ocean-light', 'ocean-dark', 'forest-light', 'forest-dark',
                                'sunset-light', 'sunset-dark');
            
            // Add the preview theme classes
            if (previewTheme !== 'default') {
                body.classList.add(previewTheme + '-theme');
                if (previewShade !== 'default') {
                    body.classList.add(previewShade);
                }
            }
            
            // Add animation class
            body.classList.add('theme-change');
            
            // Remove animation class after animation completes
            setTimeout(() => {
                body.classList.remove('theme-change');
            }, 400);
        }
    </script>
</body>
</html>

update_quest.php:
<?php
require_once 'includes/config.php';
require_once 'includes/functions.php';

if (!is_logged_in()) {
    header('Content-Type: application/json');
    echo json_encode(['success' => false, 'error' => 'Not logged in']);
    exit();
}

// Check if user has quest giver permissions
$role = $_SESSION['role'] ?? '';
if (!in_array($role, ['quest_giver', 'hybrid'])) {
    header('Content-Type: application/json');
    echo json_encode(['success' => false, 'error' => 'Unauthorized']);
    exit();
}

header('Content-Type: application/json');

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $quest_id = $_POST['quest_id'] ?? 0;
    $status = $_POST['status'] ?? '';
    $action = $_POST['action'] ?? '';

    if ($action !== 'update_quest_status' || !in_array($status, ['active', 'archived'])) {
        echo json_encode(['success' => false, 'error' => 'Invalid request']);
        exit();
    }

    try {
        $stmt = $pdo->prepare("UPDATE quests SET status = ? WHERE id = ?");
        $stmt->execute([$status, $quest_id]);
        
        echo json_encode(['success' => true]);
    } catch (PDOException $e) {
        error_log("Database error updating quest status: " . $e->getMessage());
        echo json_encode(['success' => false, 'error' => 'Database error']);
    }
} else {
    echo json_encode(['success' => false, 'error' => 'Invalid request method']);
}

